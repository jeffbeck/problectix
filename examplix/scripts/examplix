#!/usr/bin/perl -w
# Dieses Script (examplix) wurde von Rüdiger Beck erstellt
# Es ist freie Software
# Bei Fehlern wenden Sie sich bitte an mich.
# jeffbeck@web.de  oder  jeffbeck@gmx.de

# Bibliotheken
use strict;
use Getopt::Long;
use DBI;
use Spreadsheet::WriteExcel;
use Spreadsheet::ParseExcel;



my $create="";
my $tasks="";
my $result="";
my $help=1;

my %hash=();

my @students=("rainer","werner","udo");


# Parsen der Optionen
my $testopt=GetOptions(
           "create|c=s" => \$create,
           "tasks|t=s" => \$tasks,
           "result|r=s" => \$result,
           "help|h" => \$help,
          );

# Prüfen, ob Optionen erkannt wurden, sonst Abbruch
&check_options($testopt);


# --create
if ($create ne "") {
  $help=0;
  #
  if (-e $create){
      print "ERROR: \n",
            "   Exam-Directory $create exists already\n",
            "   I'm doing nothing!\n";
  } else {
     &create_exam($create); 
  }
}


# --tasks
if ($tasks ne "") {
    $help=0;
    if (not -e "$tasks/exam.conf"){
	print "Exam $tasks does not exist. Use option --create\n";
        exit;
    }
    print "Creating the following Task-Files of exam $tasks:\n";
    @students=&get_students($tasks);
    %hash = &create_task_hash();
    while (my ($file,$prob) = each %hash ){
        print "$file with Problems: $prob \n";
        &create_file($file,$prob);
    }
}


# --result
if ($result ne "") {
    $help=0;

# old stuff

#    print "Creating the results of  exam $result:\n";
#    @students=&get_students($result);
#    my %files=&create_resultfiles($result);
#    my $files_ref = \%files;
#    my %files_results = &get_subject_files($files_ref);
#    my $calculate_ref = \%files_results;
#    while (my ($k, $v) = each %files_results ) {
#	print "$k: \n";
#        print "$v \n\n";
#    }
#    &calculate_subjects($calculate_ref);



# new stuff

# parsing subjects

# todo: fetching 
#         - Subjects
#         - number of corrections
#         - number of problems
# from exam.conf



my @subjects=("Technologie");


my @problems=("T1","T2","T3","T4","T5");     

my @numstrings=("Erstkorrektur","Zweitkorrektur");



&latex_preamble();


my @stud_res=&get_students($result);

    foreach my $sub (@subjects){
	print "Creating Result of subject $sub ...\n";
        print LATEX "\\section{$sub}\n\n";
        print LATEX "\\begin{longtable}{|l|";
        foreach my $col (@problems){
           print LATEX "c|";
        }

        print LATEX "c|c|} \n";


        print LATEX "Name  & ";
        foreach my $col (@problems){
           print LATEX "$col & ";
        }
        print LATEX "Summe & Durchschnitt  & Gesamtdurchschnitt \\\\ \n\n";


        foreach my $student (@stud_res){
	   print "##########  Working on student $student ... ##########\n";

	   foreach my $num (@numstrings){
              print " ### $num ...\n";
	      my $average=0;
              my $sum=0;
              my $divisor=0;

              my $line="";
              if ($num eq "Erstkorrektur"){
                 $line=$student." & ";
	     } else {
                 $line=$student." & ";
             }

              open (CONF, "$result/exam.conf") || die "Fehler: $!";
              while (<CONF>){
                  s/^ //g; # Leerzeichen am Zeilenangfang entfernen
                  if(/^\#/){ # # am Anfang bedeutet Kommentarzeile
                      next;
                  }
                  my ($day,
                      $problem,
                      $subject,
                      $factor,
                      $corr_1,
                      $group_1,
                      $corr_2,
                      $group_2)=split(/;/);
                  my $corrector;
                  if ($num eq "Erstkorrektur"){
		      $corrector=$corr_1;
                  } elsif ($num eq "Zweitkorrektur"){
		      $corrector=$corr_2;
                  }              

                  if ($subject eq $sub) {
                      print "    Fetching data for $problem ...\n";
                      my @result = &get_result($student,
                                               $corrector,
                                               $subject,
                                               $num,
                                               $day,
                                               $problem);
                      print "      * $result[0] $problem of $student corrected",
                            " by $result[2] is $result[3] \n";
                      $line = $line."  ".$result[3];
                      $sum = $sum + $result[3]*$factor;
		      $divisor = $divisor + $factor;
                  }
              }
              $line = $line."  ".$sum;
              $average = $sum / $divisor;
              $line = $line."  ".$average."\n";
 

              print $line;
              print LATEX $line;

	   }
       }
       print LATEX "\\end{longtable}\n";
    }


    &latex_end();

}




# --help
if ($help==1) {
   # Scriptname ermitteln
   my @list = split(/\//,$0);
   my $scriptname = pop @list;
   # Befehlsbeschreibung
   print('
examplix (EXAMs Per LInux/uniX) is a tool to divide the correction of a larger exam into smaller chunks for a number of people and put together these chunks and calsulate a mark.  

Options
  -h  / --help
  -v  / --verbose
  -vv / --verbose --verbose
  -i  / --info
  -c  / --create examname
  -t  / --tasks examname
  -r  / --result examname

Please see the examplix(1) man pages for full documentation
');
   print "\n";
   exit;
}






############################################################
# SUB
############################################################
#sub fetch_result {
#    my $result="ERRRGEB.";
#    my ($sub,$num,$prob,$student) = @_;
#    print "    $sub, $num $prob for $student is: $result\n";
#
#   
#
#    # todo: fetch result
#
# 
#    return $result;
#}


sub latex_preamble {
    open (LATEX, ">$result/results/results-$result.tex");

}


sub latex_end {

    close (LATEX);

}






sub get_result {
    my ($student,$corrector,$subject,$num,$day,$problem) = @_;
    my $file=$corrector."_".$subject."_".$num."_".$day."_all.xls";
    print "      Looking in $file \n";
    my $path = "$result/collect/$file";
    my $row;
    my $column;
    my $mark;
    my $oBook = Spreadsheet::ParseExcel::Workbook->Parse("$path");
    my($iR, $iC, $oWkS, $oWkC);



          foreach my $oWkS (@{$oBook->{Worksheet}}) {
#    $oWkS->{Name} = "Korrekturergebnis";
              print "--------- SHEET:", $oWkS->{Name}, "\n";
               
              $iC=0;
              for(my $iR = 4;
                  defined $oWkS->{MaxRow} && $iR <= $oWkS->{MaxRow} ; $iR++) {
                   $oWkC = $oWkS->{Cells}[$iR][$iC];
                   #print "( $iR , $iC ) =>", $oWkC->Value, "\n" if($oWkC);
                   if ($oWkC->Value eq $student){
                      #print "ROW:   ($iR,$iC) =>",$oWkC->Value,"\n" if($oWkC);
                      $row=$iR;       
                   }
	       }
                   #look for the correct value
                   for(my $iC = $oWkS->{MinCol} ;
                        defined $oWkS->{MaxCol} && $iC <= $oWkS->{MaxCol} ; $iC++) {
                       $oWkC = $oWkS->{Cells}[3][$iC];

                       if ($oWkC){
                          if  ($oWkC->Value eq $problem){
                            #print "COLUMN:(3,$iC) =>",$oWkC->Value,"\n" if($oWkC); 
                            $column=$iC;       
		          }
                       }

                   }
               $oWkC = $oWkS->{Cells}[$row][$column];
               print "RESULT:($row,$column) =>", $oWkC->Value, "\n" if($oWkC);
               $mark=$oWkC->Value;
          }
    return ($day,$problem,$corrector,$mark);
}



sub calculate_subjects {
    my $ref=shift();
    my %calculate = %{ $ref };
    my $result_path = "$result/results";
    my $excel;
    my $sheet;
    my $corrections=2; # should be detected

    while (my ($subject, $files) = each %calculate ) {


      # do for each subject:
      print "Calculating $subject in :\n";
      
      $excel = new Spreadsheet::WriteExcel( "${result_path}/${subject}.xls" );
      $sheet  = $excel -> addworksheet("Resultat");

      my @filelist=split(/::/,$files); 

      foreach my $file (@filelist){
#	  print "   Reading File $file \n";
          my $path = "$result/tasks/$file";
          #my $path = "/home/bz/test/test.xls";
          print "  Opening $path \n";

          #if (-e $path){
          #    print "File $path exists\n";
	  #}

          my $oBook = Spreadsheet::ParseExcel::Workbook->Parse("$path");
          my($iR, $iC, $oWkS, $oWkC);
          foreach my $oWkS (@{$oBook->{Worksheet}}) {
              print "--------- SHEET:", $oWkS->{Name}, "\n";
              for(my $iR = $oWkS->{MinRow} ;
                  defined $oWkS->{MaxRow} && $iR <= $oWkS->{MaxRow} ; $iR++) {
                for(my $iC = $oWkS->{MinCol} ;
                   defined $oWkS->{MaxCol} && $iC <= $oWkS->{MaxCol} ; $iC++) {
                   $oWkC = $oWkS->{Cells}[$iR][$iC];
                   print "( $iR , $iC ) =>", $oWkC->Value, "\n" if($oWkC);
                }
              }
          }


      } # end foreach my $file

    $excel -> close();
    } # end while subject
    
}




sub get_subject_files {
    my $ref=shift();
    my %files = %{ $ref };
    my %calculate=();
    while (my ($file, $status) = each %files ) {
	#print $file," Status: ",$status,"\n";
        if ($status eq "unused"){
           # zerlegen in Fach
           my ($teacher, $subject, $numstring, $day) = split (/_/, $file);
           my $calc = $subject."_".$numstring;
           print "   $calc \n";
           if (exists $calculate{$calc}){
	       my $so_far=$calculate{$calc};
	       my $now=$so_far."::".$file;
	       $calculate{$calc}=$now;
	   } else {
	      $calculate{$calc}=$file;
	   }
        }
    }
    return %calculate;
}



sub create_resultfiles {
   my ($dir) = @_;
   my $taskdir=$dir."/tasks";
   my $file="";
   my %status_files=();
   opendir DH, $taskdir or die "Cannot open $taskdir: $!";
   foreach $file (readdir DH) {
       if ($file=~/xls$/){
#	   print "   $file \n";
           $status_files{ $file }="unused";
       }
     #print "one file in $dir is $file\n";
   }
   closedir DH;
   return %status_files;
}








sub create_file {
    my ($file,$prob) = @_;
    my @problems = split(/;/,$prob);
    my ($teacher,$subject,$numstring,$day)=split(/_/,$file);
    my $filepath=$tasks.'/tasks/'.$file;
    my $excel = new Spreadsheet::WriteExcel( "$filepath" );
    $excel->set_custom_color(40, 238,  160,  111  );



    my $color="grey";
    if ($numstring eq "Erstkorrektur"){
       $excel->set_custom_color(40, 236,  155,  155  );
       $color="red";
       $numstring="Erst."
    } elsif ($numstring eq "Zweitkorrektur") {
       $excel->set_custom_color(40, 135,  200,  135  );
       $color="green";
       $numstring="Zweit."
    }

    my $sheet  = $excel -> addworksheet("Korrekturergebnis");
    $sheet->protect('examplix');
    $sheet->set_column(0, 0,  16);


    my $row=1;
    my $column=2;

    my $format = $excel->add_format();
    $format->set_align('left');
    $format->set_bg_color('grey');
    $format->set_border(1);

    my $format_red = $excel->add_format();
    $format_red->set_align('center');
    $format_red->set_bg_color($color);
    $format_red->set_border(1);

    # unlocked to add data
    my $format_empty = $excel->add_format(locked => 0);
    $format_empty->set_border(1);
    $format_empty->set_bg_color(40);


    # inserting the students
    $row=4;
    foreach my $student (@students){
       $sheet -> write( $row, 0, $student, $format );
       $row++;
    }


    # inserting the header
    $sheet -> write( 0, 0, $teacher, $format_red );
    $sheet -> write( 1, 0, $tasks, $format_red );
    $column=1;
    foreach my $pro (@problems){
       $sheet -> write( 3, $column, $pro, $format_red );
       $sheet -> write( 2, $column, $day, $format_red );
       $sheet -> write( 1, $column, $subject, $format_red );
       $sheet -> write( 0, $column, $numstring, $format_red );
       my $i;
       for ($i = 1; $i <= $#students+1; $i++) { 
          $sheet -> write( $i+3, $column, "", $format_empty );
       }
       $column++;
    }
    $excel -> close();
}





sub create_task_hash {
    my $tmp="";
    my $new_1="";
    my $new_2="";
    my %filename=();
    open (EXAM, "$tasks/exam.conf") || die "Fehler: $!";
    while (<EXAM>){
        s/^ //g; # Leerzeichen am Zeilenangfang entfernen
        if(/^\#/){ # # am Anfang bedeutet Kommentarzeile
           next;
        } 
        chomp();
        my ($day,
            $problem,
            $subject,
            $factor,
            $corr_1,
            $group_1,
            $corr_2,
            $group_2)=split(/;/);

        if ($group_1 eq "") {
            $group_1="all";
        }
        if ($group_2 eq "") {
            $group_2="all";
        }
        my $filename_1="$corr_1"."_"."$subject"."_".
                       "Erstkorrektur"."_"."$day"."_"."$group_1".".xls";
        my $filename_2="$corr_2"."_"."$subject"."_".
                       "Zweitkorrektur"."_"."$day"."_"."$group_1".".xls";
        if (not exists $filename{$filename_1} ){
	    $filename{$filename_1}="$problem";
        } else {
            $tmp=$filename{$filename_1};
            $new_1=$tmp.";".$problem;
            $filename{$filename_1}="$new_1";
        }
        if (not exists $filename{$filename_2} ){
	    $filename{$filename_2}="$problem";
        } else {
            $tmp=$filename{$filename_2};
            $new_2=$tmp.";".$problem;
            $filename{$filename_2}="$new_2";
        }
    }
    close EXAM;
    return %filename;
}
#}




sub create_exam {
    my ($exam) = @_;
     print " Creating a new exam $create\n";
     system("mkdir $create");
     system("mkdir $create/config");
     system("touch $create/exam.conf");
     open (EXAM, ">>$create/exam.conf")|| die "Fehler: $!";
     print EXAM "#TAG;AUFGABE;FACH;FAKTOR;KORR1;GROUP1;KORR2;GROUP2\n";
     close EXAM;
     system("mkdir $create/tasks");
     system("mkdir $create/collect");
     system("mkdir $create/results");
}




sub  check_options{
   my ($parse_ergebnis) = @_;
   if (not $parse_ergebnis==1){
      my @list = split(/\//,$0);
      my $scriptname = pop @list;
      print "\nYou have made a mistake, when specifying options.\n"; 
      print "See error message above. \n\n";
      print "... $scriptname is terminating.\n\n";
      exit;
   } else {
      print "All options  were recognized.\n";
   }

}


sub get_students {
    my ($kind)=@_;
    my @users=();
    my $user;
    my $file=$kind.'/config/'."users.txt";

    print "Opening $file to fetch students ...\n";
    open (USERS, "<$file")  || die "Fehler: $!";
    while (<USERS>){
        $user=$_;
        chomp($user);
        push @users, $user;
    }
    close USERS;
    return @users;
}
