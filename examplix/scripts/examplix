#!/usr/bin/perl -w
# Dieses Script (examplix) wurde von Rüdiger Beck erstellt
# Es ist freie Software
# Bei Fehlern wenden Sie sich bitte an mich.
# jeffbeck@web.de  oder  jeffbeck@gmx.de

# Bibliotheken
use strict;
use Getopt::Long;
use DBI;
use Spreadsheet::WriteExcel;



my $create="";
my $tasks="";
my $help=1;

# Parsen der Optionen
my $testopt=GetOptions(
           "create|c=s" => \$create,
           "tasks|t=s" => \$tasks,
           "help|h" => \$help,
          );

# Prüfen, ob Optionen erkannt wurden, sonst Abbruch
&check_options($testopt);


# --create
if ($create ne "") {
  $help=0;
  #
  if (-e $create){
      print "ERROR: \n",
            "   Exam-Directory $create exists already\n",
            "   I'm doing nothing!\n";
  } else {
     &create_exam($create); 
  }
}


# --tasks
if ($tasks ne "") {
    $help=0;
    if (not -e "$tasks/exam.conf"){
	print "Exam $tasks does not exist. Use option --create\n";
        exit;
    }

    print "Creating Task-Files of exam $tasks\n";
    open (EXAM, "$tasks/exam.conf")|| die "Fehler: $!";
    while (<EXAM>){
        s/^ //g; # Leerzeichen am Zeilenangfang entfernen
        if(/^\#/){ # # am Anfang bedeutet Kommentarzeile
           next;
        } 
	#print $_;
        chomp();
        my ($day,
            $problem,
            $subject,
            $factor,
            $corr_1,
            $group_1,
            $corr_2,
            $group_2)=split(/;/);

        if ($group_1 eq "") {
            $group_1="all";
        }
        if ($group_2 eq "") {
            $group_2="all";
        }

        my $filename_1="$corr_1"."_"."$subject"."_".
                       "Erstkorrektur"."_"."$day"."-"."$group_1".".xls";
        my $filename_2="$corr_2"."_"."$subject"."_".
                       "Zweitkorrektur"."_"."$day"."-"."$group_1".".xls";
        print $filename_1,"\n";
        print $filename_2,"\n";

        # filenames in hash, doppelungen vermeiden
        # value des hashes: Liste der Aufgaben
        # aus einem dieser key-value-paare wird per function eine Datei
        

    }
    close EXAM;
}





# --help
if ($help==1) {
   # Scriptname ermitteln
   my @list = split(/\//,$0);
   my $scriptname = pop @list;
   # Befehlsbeschreibung
   print('
examplix (EXAMs Per LInux/uniX) is a tool to divide the correction of a larger exam into smaller chunks for a number of people and put together these chunks and calsulate a mark.  

Options
  -h  / --help
  -v  / --verbose
  -vv / --verbose --verbose
  -i  / --info
  -c  / --create examname
  -t  / --tasks

Please see the examplix(1) man pages for full documentation
');
   print "\n";
   exit;
}





exit;











my $row;
my $column;
my $data;
my $format;


my $excel = new Spreadsheet::WriteExcel( "$create/test.xls" );

my $sheet  = $excel -> addworksheet();


$row=1;
$column=2;
$data="hemp";
$format = $excel->add_format();
$format->set_align('center');
$format->set_bg_color('red');

$sheet -> write( $row, $column, $data, $format );


$excel -> close();






############################################################
# SUB
############################################################


sub create_exam {
    my ($exam) = @_;
     print " Creating a new exam $create\n";
     system("mkdir $create");
     system("mkdir $create/config");
     system("touch $create/exam.conf");
     open (EXAM, ">>$create/exam.conf")|| die "Fehler: $!";
     print EXAM "#TAG;AUFGABE;FACH;FAKTOR;KORR1;GROUP1;KORR2;GROUP2\n";
     close EXAM;
     system("mkdir $create/students");
     system("mkdir $create/teachers");
     system("mkdir $create/tasks");
     system("mkdir $create/collect");
     system("mkdir $create/results");
}


sub  check_options{
   my ($parse_ergebnis) = @_;
   if (not $parse_ergebnis==1){
      my @list = split(/\//,$0);
      my $scriptname = pop @list;
      print "\nYou have made a mistake, when specifying options.\n"; 
      print "See error message above. \n\n";
      print "... $scriptname is terminating.\n\n";
      exit;
   } else {
      print "All options  were recognized.\n";
   }

}


