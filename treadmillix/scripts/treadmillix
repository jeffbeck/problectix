#!/usr/bin/perl -w
# Dieses Script (treadmillix) wurde von Rüdiger Beck erstellt
# Es ist freie Software
# Bei Fehlern wenden Sie sich bitte an mich.
# jeffbeck@web.de  oder  jeffbeck@gmx.de

# Bibliotheken
use strict;
use Getopt::Long;
Getopt::Long::Configure ("bundling");
use File::Find;
use File::Path; # rmtree, ...

use problectix;

my $help=0;
my $digit=1;
my $max_digit=2;
my $min_digit=2;

# ===========================================================================
# Optionen verarbeiten
# ==========================================================================
# Parsen der Optionen
my $testopt=GetOptions(
           "help|h" => \$help,
           "digit=n"=> \$digit,
           "max-digit=n"=> \$max_digit,
           "min-digit=n"=> \$min_digit,
          );



# Prüfen, ob Optionen erkannt wurden, sonst Abbruch
&problectix::check_options($testopt);


# --help
if ($help==1){
   print "\ntreadmillix creates unit conversion problems as a latex",
         " table to be insserted into a teilaufgabe ",
         "environment\nwithin a documentclass teacher document.\n";

   # optionen
   print('
Options
  -h  / --help
  --digit number (valid digits)
  --max-digit number
  --min-digit number
  --length_si
  --length_us
  --area_si
  --area_us
Todo: Please see the treadmillix(1) man page for full documentation
');
   print "\n";
   exit;
}



my $number;






# Create problems

# step 1
# generate number
$number=&generate_random_number();

# step 2
# select unit (problem)

# fetch all possible units
my @all_units = &fetch_units("length_si");

my ($q_unit,$a_unit) = &select_units(@all_units);






# step 3
# select unit (solution)

# step 4
# calculate solution

# step 5
# print problem and solution








print "Aufgabe: $number $q_unit = _____ $a_unit\n";

sub select_units {
    my @list=@_;
    my $random_1=0;
    my $random_2=0;
    my $question="";
    my $answer="";
    my $count=$#list+1;
    $random_1 = int( rand( $count-1+1 ) );
    print "Selecting Element $list[$random_1] ($random_1) as question unit\n";
    $question=$list[$random_1];

    until ($random_1!=$random_2 and $random_2!=0){
       $random_2 = int( rand( $count-1+1 ) );
       print "Selecting Element $list[$random_2] ($random_2)as answer unit\n";
       $answer=$list[$random_2];
    } 
    return ($question,$answer);
}



sub generate_random_number {
    # generates a random number
    #  - with $digit valid digits 
    #  - with maximum $max_digit digits
    #  - with minimum $min_digit digits

    # generat a integer number with $digit digits
    my $integer=0;
    while ($integer <= 10**($digit-1) ){
       $integer=int(rand(1)*10**$digit);
    }
    print "Random integer with a exactly $digit digits:  $integer \n";
    my $float=10*$integer/10**$digit;
    print "Random float between 1 and 10 ($digit digits):  $float \n";

    # genetate a random power 
    my $digit_span=$max_digit+$min_digit;
    my $power_span = int( rand( $digit_span+1 ));
    # random power betwenn min_digit and max_digit 
    # (can be negative)
    my $power = $power_span-$min_digit;
    print "Random power within -$min_digit and $max_digit:  $power \n";

    my $number=$float*10**$power;

    return $number;
}


sub fetch_units {
    my @unit_files = @_;
    my @list=();
    foreach my $file (@unit_files){
      print "Opening $file: \n"; 
      open(DATEI, "../data/$file" );
       while(<DATEI>){
           my ($unit,$factor,$latex)=split(/;/);
	   #print "Unit $unit, $factor, $latex \n";
           push @list, $unit;
       }
       close(DATEI);
    }
    return @list;
 }

