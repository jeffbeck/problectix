#!/usr/bin/perl -w
# Dieses Script (einmaleins) wurde von Rüdiger Beck erstellt
# Es ist freie Software
# Bei Fehlern wenden Sie sich bitte an mich.
# jeffbeck@web.de  oder  jeffbeck@gmx.de

# Bibliotheken
use strict;
use Getopt::Long;
Getopt::Long::Configure ("bundling");
use File::Find;
use File::Path; # rmtree, ...
#use Schedule::at;

use problectix;

my $latex=0;
my $help=0;
my $lines=1;
my $fix=-1;
my $type="";
my $from_1=1;
my $to_1=10;
my $from_2=1;
my $to_2=10;

my $product_hide=1;
my $factor_hide=0;
my $mixed_multiplication_hide=0;

# ===========================================================================
# Optionen verarbeiten
# ==========================================================================
# Parsen der Optionen
my $testopt=GetOptions(
           "help|h" => \$help,
           "lines=i" => \$lines,
           "from1=i" => \$from_1,
           "to1=i" => \$to_1,
           "from2=i" => \$from_2,
           "to2=i" => \$to_2,
           "fix=i" => \$fix,
           "latex" => \$latex,
           "product" => \$product_hide,
           "factor" => \$factor_hide,
           "mixed-multiplication" => \$mixed_multiplication_hide,
           "type=s" => \$type,
          );


# todo

# check if fix is a necessary option
# add options type 'product' (query for product),
#                  'factor' (query factor 1 or factor 2) 
#                  'division' (query)



# Prüfen, ob Optionen erkannt wurden, sonst Abbruch
&problectix::check_options($testopt);


# --help
if ($help==1){
   print "\neinmaleins creates a latex table to be insserted into a teilaufgabe ",
         "environment\nwithin a documentclass teacher document.\n";

   # optionen
   print('
Options
  -h  / --help
  --lines number        create number of lines

range of factors (multiplication and division)
  --from1 number        lower border for factor 1
  --to1 number          upper border for factor 1
  --from2 number        lower border for factor 2
  --to2 number          upper border for factor 2

multiplication
  --product             standard : a x b = _
  --factor              a x _ = c OR _ x b = c

division
  --quotient            a : b = _
  --divisor             a : _ = c
  --divident            _ : b = c
  --mixed-division (the above mixed irregularly)

  --fix number         one factor is fix
  --type [to be done]

Please see the einmaleins(1) man page for full documentation
');
   print "\n";
   exit;
}


my $line="";
my $auf_per_line=4;
my $aufgabe_nr=$auf_per_line*$lines;
my $aufgabe="";
my $rest;
my $i;
my $mm="5mm";

my $separator="";
my $line_end="";
if ($latex==1){
    $separator=" &";
    $line_end=" \\\\";
    print "\n".'    \begin{tabular}[t]{lp{'.$mm.'}lp{'.$mm.'}lp{'.$mm.'}l}'."\n";
}



for ($i = 1; $i <= $aufgabe_nr; $i++) {
    # create one problem
    $aufgabe=&create_aufgabe($type,$fix);
    $rest=$i%4;

    if ($rest==0){
       # last in the line
	$line=$line.$aufgabe.$line_end;
        print "       $line \n";
        $line="";
    } else {
        # not the last
	$line=$line.$aufgabe.$separator.$separator." \n         ";
   }
}


if ($latex==1){
   print '    \end{tabular}'."\n\n";
}



############################################################
# sub
############################################################


sub create_aufgabe {
    my ($type,$fix) = @_;
    my $tmp=0;
    my $lower_1=$from_1; 
    my $upper_1=$to_1;
    my $aufgabe;
    # calculate factor one
    my $factor_1;
    if ($fix!=-1){
       $factor_1 = $fix; 
    } else {
       # statt 0.5 1 ergibt gleiche Verteilung
       $factor_1 = int(rand( $upper_1-$lower_1+1 ) ) + $lower_1; 
    }  

    # calculate factor 2
    my $lower_2=$from_2; 
    my $upper_2=$to_2; 
    my $factor_2 = int(rand( $upper_2-$lower_2+1 ) ) + $lower_2; 
    my $product=$factor_1*$factor_2;

    # randomly switch factors
    ($factor_1,$factor_2)=&random_switch_factors($factor_1,$factor_2);

    # print problem
    $aufgabe=&typeset_aufgabe($factor_1,$factor_2,$product);    
    return $aufgabe;
}





sub random_switch_factors {
    my ($value_1,$value_2) = @_;
    my $tmp;
    if ( rand() > 0.5){
        # switch
        $tmp=$value_1;
        $value_1=$value_2;
        $value_2=$tmp;
    }
    return ($value_1,$value_2);
}




sub typeset_aufgabe {
   my ($factor_1,$factor_2,$product) = @_; 
   if ($factor_hide==1){
      if ( rand() > 0.5){
          # hide first
          if ($latex==1){
             $aufgabe='$ \lll[9]{'."$factor_1".
                      '}\, \cdot '.
                      "$factor_2".'\, = '.
                      "$product".' $';
          } else {
	     $aufgabe="($factor_1) x $factor_2 = $product";
          }
      } else {
          # hide second
          if ($latex==1){
             $aufgabe='\hspace{-2mm}$ '."$factor_1".
                      ' \cdot \,\,\,\,\lll[9]{'.
                      "$factor_2".'} = '.
                      "$product".' $';
          } else {
	     $aufgabe="$factor_1 x ($factor_2) = $product";
          }

      }
   } elsif ($product_hide==1){
      if ($latex==1){
          $aufgabe='$ '."$factor_1".
                   ' \cdot '.
                   "$factor_2".' = \,\,\,\,\lll[10]{'.
                   "$product".'} $';
      } else {
	  $aufgabe="$factor_1 x $factor_2 = ($product)";
      }
   }
   return $aufgabe;
}
