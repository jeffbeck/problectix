#!/usr/bin/perl -w
# Dieses Script (problectix-collection) wurde von Rüdiger Beck erstellt
# Es ist freie Software
# Bei Fehlern wenden Sie sich bitte an mich.
# jeffbeck@web.de  oder  jeffbeck@gmx.de

# Bibliotheken
use strict;
use Getopt::Long;
Getopt::Long::Configure ("bundling");
use File::Find;
use File::Path; # rmtree, ...
use File::Basename;
#use Time::Local;
use Time::localtime;
#use Schedule::at;
#use Term::ANSIColor qw(:constants); # farbiger Text RED, BLUE, ...

use problectix;

# Einlesen der Konfigurationsdatei für Entwickler
#{ package DevelConf ; do "/etc/sophomorix/devel/user/sophomorix-devel.conf"}

# jeffbecks Bibliothek und
# Einlesen der Konfigurationsdatei
#require "${DevelConf::library_pfad}/sophomorix-lib";


# in *.conf eine LISTE mit Aufgabentrees, sie machen die Gesamtmenge 
# der Aufgaben aus
# Aus dieser Gesamtmenge können Projekte zusammengefasst werden
# diese Pfade müssen in $TEXINPUTS enthalten sein
# am besten diese Variable auswerten, sonst muss man alles doppelt machen
# usermin: wenn $texinputs lerr, dann entspr. Meldung was durchsuchen

# Check-Script, das auf solche Fehler hin prüft und tipps gibt
# Error erzeugen, wenn derselbe Dateinamen doppelt vorkommt


# Beim Erstellen von png's sollen nur die veränderten *.tex-dateien neu compiliert
# werden 




# Hash mit Verzeichnissen, in denen nicht mehr weitergesucht werden soll
my %exclude_dirs = qw(.git ignore
                      .git_filters ignore
                      test ignore
                      ARB ignore
                      INFO ignore
                      WORK ignore
                      FOL ignore
                      LAB ignore
                      FOIL ignore
                      BB ignore
                      TEST ignore
                      EXAM ignore
                      exam ignore
                      sonstiges ignore
                      aufgabensammlungen ignore
                     );

my @projects=();
# Datenbank für alle erzeugten png's
my %png_db=();
my $key;
my $value;
# ==========================================================================
# Variablen für Optionen
# ==========================================================================
my $help=0;
my $verbose=0;
my $start_path="";
my $command_line_path="";
my $abs_command_line_path="";
my $renew=0;
my $kamulti=0;
my $type_name="";
my $practice=2;
my $ignored_dirs=0;
my $count_prob=0;
my $counter_problems=0;
my $counter_html_pages=1; # index.html is html file 1
my $counter_compiled=0;
my $browsetree=0;
my $search="";
my $match_practice="";
my $string_printout="";
my $layout="";
my $order_number="777";
my $browsetree_path="";

my @dir_list=();

# $HOME ermitteln
my $home="$ENV{'HOME'}";
# print "Homeverzeichnis ist:     \n  $home \n\n";   

### KONFIGURATION

# systemweite Konfiguration
my $sys_config = "/etc/problectix/problectix.conf";
# userabhaengige Konfiguration
my $config_dir="$ENV{'HOME'}/.problectix";
my $user_config="$config_dir"."/.problectix";


# ===========================================================================
# Konfigurations-Dateien sourcen
# ==========================================================================

# Abbruch, falls sysweite config fehlt
if (not -e $sys_config) {
    print "$sys_config does not exist. exiting ...\n\n";
    exit;
} else {
   # werte der sysconfig einlesen
   { package SysConf ; do "$sys_config"}
    $browsetree_path="$SysConf::browsetree_path";
    $start_path="$SysConf::start_path";
}

# userweit, falls existent
if (-e "$user_config") {
   { package UserConf ; do "$user_config"}
   $browsetree_path="$UserConf::browsetree_path";
   $start_path="$UserConf::start_path";
}

# dummy, avoid warning
if($SysConf::start_path){};
if($UserConf::start_path){};
if($UserConf::browsetree_path){};

# ===========================================================================
# Optionen verarbeiten
# ==========================================================================
# Parsen der Optionen
my $testopt=GetOptions(
           "verbose|v+" => \$verbose,
           "help|h" => \$help,
           "kamulti" => \$kamulti,
           "renew" => \$renew,
           "browsetree|tree" => \$browsetree,
           "practice" => \$practice,
           "ignored-dirs" => \$ignored_dirs,
           "count" => \$count_prob,
           "layout=s" => \$layout,
           "search=s" => \$search,
           "path=s" => \$command_line_path,
          );



# Prüfen, ob Optionen erkannt wurden, sonst Abbruch
&problectix::check_options($testopt);

# --ignored-dirs
if ($ignored_dirs==1){
    my @ignored=();
    print "\nIgnored directories in $start_path\n";
    while (($key,$value) = each %exclude_dirs){
        push @ignored, $key;
    }
    @ignored = sort @ignored;
    foreach my $dir (@ignored){
	print "   $dir \n";
    }
    exit;
}


# --path # OK
if ($command_line_path ne "") {
    # pfad muss absolut angegeben werden
    # ????? relativer Pfad umbiegen
    $start_path = $command_line_path;
}


# --search OK
if ($search ne ""){
    print "* Searching for ${search} in $start_path ... \n";
    my $command="grep \"$search\" -r -i -n $start_path";
    print "* Using: $command\n";
    my $result=`$command`;
    my @lines = split(/\n/,$result);

    @lines = sort @lines;
    my $count=0;

    foreach my $res (@lines){
        my ($path,$line_number) = split(/:/,$res);
        if (not $path=~/\.tex$/){
            next;
        }
        $count++;
        print "$count) $path (Line $line_number):\n";
        my ($pre,$string) = split( /:${line_number}:/ ,$res);

        if ($verbose==0){
            print "   $string \n";
        } else {
            &print_lines($path,$line_number);
        }
    }
    exit;
}


# --count
if ($count_prob==1){
    $browsetree=1;
}




# --browsetree
if ($browsetree==0) {
    if (not -e $browsetree_path){
        print "mkdir $browsetree_path ...\n";
        system("mkdir $browsetree_path");
    }
} else {
    # option browsetree
    # make sure to compile all problems 
    # Bei renew den ganzen bisherigen tree löschen
    if (not -e $SysConf::browsetree_path) {
        # Anlegen
        print "mkdir $SysConf::browsetree_path ...\n";
        system("mkdir $SysConf::browsetree_path");
    } elsif ($renew==1) {
         # Löschen und neu anlegen
         rmtree("$SysConf::browsetree_path"); 
         system ("mkdir $SysConf::browsetree_path");
    }
    &read_png_db();
}



# --help
if ($help==1) {
   # Scriptname ermitteln
   my @list = split(/\//,$0);
   my $scriptname = pop @list;
   # Befehlsbeschreibung
   print "$scriptname erzeugt eine Aufgabensammlung aus einem \n";
   print "Verzeichnis von Aufgaben im *.tex-Format.\n";

   # optionen
   print('
Options
  -h  / --help
  -v  / --verbose
  -vv / --verbose --verbose

Create project of ALL problems
  --browsetree

  Optional Parameters:
     --renew (recreate all problems)

Count problems only:
  --count

What kind of problems to use:

   Use only problems marked with the \'-U\' tag:
      --practice (default)

Search in the source code of all problems:

 --search string


Please see the problectix(1) man page for full documentation
');
   print "\n";

   exit;
}



$browsetree_path="$SysConf::browsetree_path";


# Ausgabe der gueltigen Werte
print "* Browsetree: $SysConf::browsetree_path\n";
print "* Searching:  $start_path\n";

# sicherstellen, dass Projektverzeichnis existiert
if (not -e $config_dir){
    print "mkdir $config_dir ...\n";
    system("mkdir $config_dir");
}



# Start-verzeichnis-name ermitteln
my @list = split(/\//,$start_path);
my $start_dir = pop @list;

# Welche Verzeichnisse durchsucht werden müssen
# Am Beginn nur das Startverzeichnis
my @verzeichnisliste=($start_dir);

# ===========================================================================
# Aufgabensammlung erzeugen
# ==========================================================================
my @project_list=();
my $curr_project="";
@dir_list=($start_path);   

&aufgabensammlung(@dir_list);

# end of programm is in function 'last_exit'






# ===========================================================================
# Subroutinen
# ==========================================================================

sub get_order_number{
    # opens a file and reads an order=number entry
    my ($aufgabe) = @_;
    # Standardwert
    my $order="9999";
    my $a;
    #print "Aufgabe: $aufgabe\n";
    open (AUORDER, "<$aufgabe") || die "$aufgabe: $!";
    while (<AUORDER>){
        chomp();   
        s/\s//g;
        if ( /^\\order{([0-9]+)}/ ){
           $order=$1;
        }
        next;
    }
    close(AUORDER);
    return "$order";
}


sub png_von_aufgabe{
    $counter_problems++;
    # Parameter ist der absolute Dateipfad
    # der *.tex-Datei mit der Aufgabe
    my ($datei_pfad) = @_;
    my @list = split(/\//,$datei_pfad);
    my $datei = pop @list;
    my $datei_ohne_tex = $datei;
    my $gen_png="$browsetree_path"."/"."$datei"."-gen.png";
    my $order_number=&get_order_number($datei_pfad);
    # decide if a new png is needed
    my($dev, $ino, $mode, $nlink, $uid, $gid, $rdev,
    $size, $atime, $mtime, $ctime, $blksize, $blocks)
    = stat($datei_pfad);
    if ($verbose>0){
        print " Checking if I should create  $gen_png\n\n";
    }
    if (not exists $png_db{$datei} or 
       (not -e $gen_png) or
       (exists $png_db{$datei} and $png_db{$datei} ne $mtime)){
       # create a png
       my $png_to_mv=$datei_pfad;
       $png_to_mv=~s/.tex$/-temp-1.png/g;
       print "  + $datei: Creating $gen_png\n";       
       print "    $datei: Compiling ...\n";
       $counter_compiled++;
       my $command = "jefflatex --file $datei_pfad --png --noview --silent-dvips --problems-only > /dev/null";
       # print "$command\n";
       system($command);

       if (-e $png_to_mv){
           if ($verbose>0){
               print "\n mv $png_to_mv $gen_png \n\n";
           }
           system("mv $png_to_mv $gen_png");
       } else {
           # multipages png
           # move the main file
           my $file_base = basename($png_to_mv,".png");
           my $dir_base = dirname($png_to_mv);
           my $png= $dir_base."/".$file_base."-0.png";
           my $app="";
           if ($verbose>0){
              print "   Looking for file     $png \n";       
           }
           if (-e $png){
              system("mv $png $gen_png");
           }
           # move the appendixes
           for (my $i = 1; $i <= 9; $i++) {  # count from 1 to 5
              my $file_base = basename($png_to_mv,".png");
              my $dir_base = dirname($png_to_mv);
              my $png= $dir_base."/".$file_base."-".$i.".png";
              $app=$gen_png."-app".$i;
              if ($verbose>0){
                print "   Looking for appendix $png \n";       
              }
              if (-e $png){
                system("mv $png $app");
              }
          }
       }
       # neuer Datenbankeintrag machen
       $png_db{$datei}=$mtime;
   } else {
       print "- $datei\n";
   }
}


sub aufgabensammlung {
    # Übergeben wurde der Start-Pfad
    # Dieser ist nun als einziges in der Verzeichnisliste
    my @verzeichnisliste = @_;
    my @tex_list = ();
    my $work_dir;
    &start_index_html();

   # Beginn der while-Schleife, solange es Verzeichnisse gibt
   while (1==1) {
      # Erstes Element aus der Verzeichnisliste holen 
      # (Element wird aus array entfernt)
      # $work_dir ist enthält absoluten Pfad
      $work_dir = shift(@verzeichnisliste);
 
      # Ausstieg, wenn @verzeichnisliste leer ist
      if (not defined $work_dir) {
          # Programmende
          &last_exit();
      }

      # $dir   : Verzeichnisname (ohne Pfad) 
      my @pathlist = split(/\//,$work_dir);
      my $dir = pop @pathlist;
      # Pfadliste leeren
      @pathlist = ();

      # Gibt es *.tex-Dateien
      @tex_list=&list_tex_dateien($work_dir);

      foreach my $line (@tex_list){
        if ($verbose>0){
	  print " + $line \n";
        }
      }

      # Gibt es Verzeichnisse
      my @dir_list=&list_dirs($work_dir);
  
      # do something with the value
      if (defined $tex_list[0]) {
          # Tex-Dateien bearbeiten, falls Liste nicht leer
          if ($count_prob==1){
              # count only
              foreach my $file (@tex_list){
                  $counter_problems++;
              }
          } else {                  
             #print "\n\nDIR: $dir\n\n";
             #print "Liste:  @tex_list\n\n";
             &html_seite_erstellen($dir,@tex_list);
          # Link auf diese Datei Erstellen in index.html
          print INDEX "<h3><A HREF=\"",
                      "$dir.html",
                      "\">",
                      "$dir",
                      "</A></h3>",
                      "\n";
          }
      } elsif (not defined $dir_list[0]) {
          # mini-Überschrift erstellen (Verzeichnis ist leer)
          if ($count_prob==1){
              # do nothing
          } else {
             print INDEX '<h4>',"$dir"," &nbsp; (noch keine Aufgaben)",
                         '</h4>',"\n";
          }      
      } else {
          if ($count_prob==1){
              # do nothing
          } else {
              # Große Überschrift (übergeordnetes Verzeichnis)
              print INDEX '<h1>',"$dir",'</h1>',"\n";
          }
      }

      # Verzeichnisse in Verzeichnisliste laden
      unshift @verzeichnisliste, @dir_list;
 
      # png-datenbank schreiben, als backup
      if ($browsetree==1) {
         &write_png_db;
      }
   }# Ende der While-Schleife
}


sub lastname_von_abs_pfad {
    # Parameter: absoluter Pfad
    # sub gibt letzter Name (Verzeichnis oder Datei) zurück
    my ($abs_pfad) = @_;
    my @pathlist = split(/\//,$abs_pfad);
    my $lastname = pop @pathlist;
    return $lastname;
}


sub list_tex_dateien {
   # Gibt alle *.tex-Dateien des übergebenen Verzeichnisses zurück
    my ($verzeichnis) = @_ ;
    my @tex_dateiliste = ();
    if ($verbose>0){
        print "\nSuche *.tex-Dateien im Verzeichnis $verzeichnis ...\n";
    }
    if ($verzeichnis=~/^LATEXNAME=/){
        push (@tex_dateiliste, $verzeichnis);
    } else {
       opendir(DIR, $verzeichnis) || die "Kannx $verzeichnis nicht öffnen: $!";
       while (defined (my $file = readdir(DIR))) {
          # Eintrag verarbeiten
          if ($verbose>0){
              print "Gefunden: $file     ---";
          }
          if ($file=~/${match_practice}.tex$/
              ) {
              if ($verbose>0){
                  print "ist eine *.tex-Datei\n";
              }
              $file="$verzeichnis"."/"."$file";
              push (@tex_dateiliste, $file);
          } else {
              if ($verbose>0){
	         print " ist keine *.tex-Datei\n";
              }
          }
      }
    }
    closedir(DIR);
    return @tex_dateiliste;
}


sub list_dirs {
   # Gibt alle Verzeichnisse des übergebenen Verzeichnisses zurück
   # ohne die in der exclude-liste enthaltenen
    my ($verzeichnis) = @_ ;
    my @dirs = ();
    if ($verbose>0){
        print "\nSuche Verzeichnisse im Verzeichnis $verzeichnis ...\n";
    }

    if ($verzeichnis=~/^LATEXNAME/){
    } else {    
      opendir(DIR, $verzeichnis) || die "Kann $verzeichnis nicht öffnen: $!";
      while (defined (my $eintrag = readdir(DIR))) {
          my $abs_eintrag="$verzeichnis"."/"."$eintrag";
          # Eintrag verarbeiten
          if ($verbose>0){
              print "Gefunden. $eintrag --- ";
              print "   $abs_eintrag --- ";
          }
          if (-d $abs_eintrag &&  # verbessern ?????????????????
                 $eintrag ne "auto" && 
                 $eintrag ne ".xvpics" && 
                 $eintrag ne "." &&
                 $eintrag ne "..") {
              if ($verbose>0){
   	          print " ist Verzeichnis\n";
              }
              if (exists $exclude_dirs{$eintrag}){
                  print "* Ignoring:   $abs_eintrag and subdirs\n";
              } else {
                  push (@dirs, $abs_eintrag);
	      }
          } else {
              if ($verbose>0){
                  print " KEIN Verzeichnis\n";
              }  
	  }
        
      }
      closedir(DIR);
    }
    @dirs = sort @dirs;
    return @dirs;
}


sub html_seite_erstellen {
    my ($name, @dateien) = @_;
    my $aufgabe="";
    $counter_html_pages++;

    # Aufgabendatei erstellen
    print "\n###  Creating $name.html:\n";
    open(AUFGABEHTML, ">$browsetree_path/$name.html");
    print AUFGABEHTML '<html>',"\n";
    print AUFGABEHTML '<head>',"\n";
    print AUFGABEHTML '<title>Verzeichnis: &nbsp;',"$name",'</title>',"\n";
    print AUFGABEHTML '</head>',"\n";
    print AUFGABEHTML '<body bgcolor=#E8EBFF>',"\n";
    # Die Aufgaben verarbeiten
    foreach $aufgabe (@dateien) {
       #print "$aufgabe  \n\n\n";
       my $aufgaben_name=&lastname_von_abs_pfad($aufgabe);
       my $aufgaben_name_ohne_tex = $aufgaben_name;
       $aufgaben_name_ohne_tex=~s/.tex//g;
       my $png_name = "$aufgaben_name"."-gen.png";

       if ($verbose>0){
           print "Working on $aufgaben_name\n";
       }
       # png-Grafik der Aufgabe erstellen
       &png_von_aufgabe($aufgabe);

       # Aufgabe einfügen in Verzeichnis.html
       print AUFGABEHTML '<h1 align="center">Einf&uuml;gebefehl:',
                         '  &nbsp; &nbsp; <tt>\nehme{';
       print AUFGABEHTML "$aufgaben_name_ohne_tex";
       print AUFGABEHTML '}</tt></h1>',"\n";
       print AUFGABEHTML '<h1 align="center">','<a href="',
                         "$aufgabe",
                         '">Quellcode ansehen ...</a></h1>',"\n";
       print AUFGABEHTML '<h1 align="center">','<img src="',"$png_name",'"></h1>',"\n";

       # check if multiple png's exist
       for (my $i = 1; $i <= 5; $i++) {  # count from 1 to 5
         my $app=$browsetree_path."/".$png_name."-app".$i;
           if (-e $app){
             my $letter;
               if ($i==1){$letter="A"}
               elsif ($i==2){$letter="B"}
               elsif ($i==3){$letter="C"}
               elsif ($i==4){$letter="D"}
               elsif ($i==5){$letter="E"}
               elsif ($i==6){$letter="F"}
               elsif ($i==7){$letter="H"}
               elsif ($i==8){$letter="H"}
               elsif ($i==9){$letter="I"}
               print "   $app found! Creating HTML-Link! \n";
               print AUFGABEHTML '<h3 align="center">',
                                 '<a href="',"$app",
                                 '">Anhang ',$letter,
                                 ' ansehen </a></h3>';
           }
       }

       print AUFGABEHTML '<h1 align="center">Einf&uuml;gebefehl:   &nbsp; &nbsp; <tt>\nehme{';
       print AUFGABEHTML "$aufgaben_name_ohne_tex";
       print AUFGABEHTML '}</tt></h1>',"\n";
       print AUFGABEHTML "\n",'<hr noshade size="6">',"\n\n";
    }
    # Dateiende
    print AUFGABEHTML '<hr noshade size="10">',"\n";
    print AUFGABEHTML '</body>',"\n";
    print AUFGABEHTML '</html>',"\n";
    return; 
}


sub start_index_html {
   if ($count_prob==1){
      # do nothing
   } else {
      # index.html erstellen
      open (INDEX, ">$browsetree_path/index.html") || die "Fehler: $!";
      print INDEX "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\">\n";
      print INDEX "<html>\n<head>\n";
      print INDEX "<TITLE>Aufgabensammlung</TITLE>\n";
      print INDEX "</head>\n<body bgcolor=#E8EBFF>\n";
      # Titel noch grösser (Bild???????????????)
      print INDEX "<h1>Aufgabensammlung</h1>\n";
   }
}


sub last_exit {
   if ($count_prob==1){
      # dont compile anything
   } else {
      # Index.html schliessen
      print INDEX "</body>\n<html>\n";
      print INDEX "\n";
      close(INDEX);
   }
   # BEENDEN
   print "\nVerzeichnisliste ist abgearbeitet.\n\n";
   if ($browsetree==1) {
      &write_png_db;
   }
   printf "% 5s  *.tex-files as problems\n","$counter_problems";
   if ($count_prob==1){
       printf "% 5s  HTML files\n","$counter_html_pages";

   }
   printf "% 5s  /$counter_problems*.tex-files compiled\n","$counter_compiled";
   print "\n";

   # Programmende
   exit;
}


sub write_png_db {
   # png_db schreiben
    if ($verbose>0){
        print "Writing the PNG-Database to $browsetree_path/pngdb ... ";
    }
    open (PNGDB, ">$browsetree_path/pngdb");
    while (($key,$value) = each %png_db){
      print PNGDB "$key"."::"."$value"."\n";
    }
    close(PNGDB);
}


sub read_png_db {
   # png_db schreiben
    my ($file,$date);       
    if (-e "$browsetree_path/pngdb"){
       print "* PNG-Database exists, reading it ... \n";
       open (PNGDB, "<$browsetree_path/pngdb");
       while (<PNGDB>) {
	   chomp();
           ($file,$date)=split(/::/);
           $png_db{$file}=$date; 
           if ($verbose>1){
               print "   $file was modified at $date \n";       
           }
       }
       close(PNGDB);
   } else {
       print "* PNG-Database does not exist, creating database ...\n";
   }
}


sub print_lines {
    my ($path,$num) = @_;
    open (READ, "<$path") || die "$path: $!";
    my $min_line=$num-2;
    my $max_line=$num+2;
    my $line=1;
    while (<READ>){
        chomp();
        if ($line==$num){
            printf  " %3s>>>%-90s\n",$line,$_;
        } else {
            printf  " %3s>  %-90s\n",$line,$_;
        }
        $line++;
    }
    close READ;
}
 
