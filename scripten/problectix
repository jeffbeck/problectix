#!/usr/bin/perl -w
# Dieses Script (problectix-collection) wurde von Rüdiger Beck erstellt
# Es ist freie Software
# Bei Fehlern wenden Sie sich bitte an mich.
# jeffbeck@web.de  oder  jeffbeck@gmx.de

# Bibliotheken
use strict;
use Getopt::Long;
Getopt::Long::Configure ("bundling");
use File::Find;
use File::Path; # rmtree, ...
#use Schedule::at;

use problectix;

# Einlesen der Konfigurationsdatei für Entwickler
#{ package DevelConf ; do "/etc/sophomorix/devel/user/sophomorix-devel.conf"}

# jeffbecks Bibliothek und
# Einlesen der Konfigurationsdatei
#require "${DevelConf::library_pfad}/sophomorix-lib";

# in allen Pfad-ausgaben soll /home/bz fehlen


# www: 
# in usermin: cgi-script, dass source-code sucht. wird mit dem aufgerufen
# oder abs-pfad mitspeichern und link anlegen: file:///
# evtl. letzte Möglichkeit: beim erstellen der aufgaben(.tex->png) abspeichern



# überlegen: option www nimmt immer alle Aufgaben 
# (in --schueler, --lehrer, und --loesungs-Version)
# --lehrer: links auf src
# --schueler: keine links auf source
#             beliebiger zielpfad angebbar (z.B. Public_html)
# --loesung
# bel. Zielpfad

# in *.conf eine LISTE mit Aufgabentrees, sie machen die Gesamtmenge 
# der Aufgaben aus
# Aus dieser Gesamtmenge können Projekte zusammengefasst werden
# diese Pfade müssen in $TEXINPUTS enthalten sein
# am besten diese Variable auswerten, sonst muss man alles doppelt machen
# usermin: wenn $texinputs lerr, dann entspr. Meldung was durchsuchen


# Error erzeugen, wenn derselbe Dateinamen doppelt vorkommt


# Beim Erstellen von png's sollen nur die veränderten *.tex-dateien neu compiliert
# werden 



#USERMIN

# Main Pages
#  - Projects
#        - aktives Projekt
#           <ps loesung erzeugen>
#           <ps lehrer>
#           <ps schueler>
#           <html> ...
#        - andere Projekte auflisten
#           <aktivieren> <bearbeiten>


#  - Konfiguration
#       - texinputs konfigurieren
#       - ...

# - Aufgabe ersetellen
#   (Datei Temporär in extraverzeichnis halten,
#    dort editieren, kompilieren, prüfen.
#    wenn erfolgreich abgeschlossen, dann in ein Verzeichnis einordnen)
#       - Vorlage auswählen(png-preview) 
#       - Editorfenster (html)
#       
# - CVS-Server-Modul
#       -einchecken/auschecken
#       -konfigurieren


my @projects=();

# ==========================================================================
# Variablen für Optionen
# ==========================================================================
my $help=0;
my $info=0;
my $set="";
my $start_path="";
my $command_line_path="";
my $www=0;
my $renew=0;
my $schueler=0;
my $loesung=0;
my $lehrer=0;
my $type_name="";
my $uebung=0;
my $order=0;
my $create="";
my $match_uebung="";

my $order_number="777";

my $out_path="";
my $out_ps="";
my $out_html="";

my $project_number=0;
my $active;

# $HOME ermitteln
my $home="$ENV{'HOME'}";
# print "Homeverzeichnis ist:     \n  $home \n\n";   

### KONFIGURATION

# systemweite Konfiguration
my $sys_config = "/etc/problectix/problectix.conf";
# userabhaengige Konfiguration
my $config_dir="$ENV{'HOME'}/.problectix";
my $user_config="$config_dir"."/.problectix";
# projekte eines users
my $project_dir="$config_dir/projects";
# aktives projekt eines users
my $active_project="$project_dir"."/.project";



# ===========================================================================
# Konfigurations-Dateien sourcen
# ==========================================================================

# Abbruch, falls sysweite config fehlt
if (not -e $sys_config) {
    print "$sys_config does not exist. exiting ...\n\n";
    exit;
} else {
   # werte der sysconfig einlesen
   { package SysConf ; do "$sys_config"}
    $out_path="$SysConf::output_path";
    $start_path="$SysConf::start_path";
}



# userweit, falls existent
if (-e "$user_config") {
   { package UserConf ; do "$user_config"}
   $out_path="$UserConf::output_path";
   $start_path="$UserConf::start_path";
}



# dummy
if($SysConf::output_path){};
if($SysConf::start_path){};
if($UserConf::output_path){};
if($UserConf::start_path){};


# ===========================================================================
# Optionen verarbeiten
# ==========================================================================
# Parsen der Optionen
my $testopt=GetOptions(
           "info|i" => \$info,           
           "set=s" => \$set,           
           "help|h" => \$help,
           "www" => \$www,
           "schueler|s" => \$schueler,
           "lehrer|l" => \$lehrer,
           "loesung|lsg" => \$loesung,
           "renew" => \$renew,
           "order|o" => \$order,
           "create=s" => \$create,
           "uebung|u" => \$uebung,
           "pfad|path|p=s" => \$command_line_path
          );



# Prüfen, ob Optionen erkannt wurden, sonst Abbruch
&check_options($testopt);

# --schueler, --lehrer, --loesung
if ($schueler==1){
    $type_name="schueler";
} elsif ($lehrer==1){
    $type_name="lehrer";
} elsif ($loesung==1){
    $type_name="loesung";
} else {
    $type_name="error";
}


# --path
if ($command_line_path ne "") {
    # pfad muss absolut angegeben werden
    # ????? relativer Pfad umbiegen
    $start_path = $command_line_path;
}

# --help
if ($help==1) {
   # Scriptname ermitteln
   my @list = split(/\//,$0);
   my $scriptname = pop @list;
   # Befehlsbeschreibung
   print "$scriptname erzeugt eine Aufgabensammlung aus einem \n";
   print "Verzeichnis von Aufgaben im *.tex-Format.\n";

   # optionen
   print "\nOptionen:\n\n";

   print "  --info, -i\n";
   print "     Alle Dateien anzeigen, die verarbeitet werden. \n\n";

   print "  --pfad verzeichnis, --path verzeichnis, -p  verzeichnis\n";
   print "     Angabe in welchem verzeichnis soll nach *.tex-Dateien \n";
   print "     gesucht werden soll.\n";

   print "  --www\n";
   print "     Erzeugt ein Verzeichnis $out_html mit\n";
   print "     darunterliegenden html-Dateien.\n";

   print "  --uebung, -u\n";
   print "     Nutzt nur Dateien, die mit \"-U.tex\" enden.\n";
   print "     (Übungsaufgaben)\n";

   print "  --schueler, -s\n";
   print "     Erzeugt eine Aufgabensammlung für Schüler.\n";
   print "     (ohne Lösungslinien)\n";

   print "  --lehrer, -l\n";
   print "     Erzeugt eine Aufgabensammlung für lehrer incl. Lösung\n";

   print "  --loesung, -lsg\n";
   print "     Erzeugt ein Lösungsblatt.\n";

   print "  --set n\n";
   print "     Setzt das Projekt n aktiv. (n=1,2,3,...)\n";
   print "     Eine Liste der moeglichen Projekte erhaelt man mit ?????\n";

   print "  --renew\n";
   print "     Löscht das Verzeichnis $out_html, um es neu\n";
   print "     zu erzeugen.\n";

   print "\n";

   exit;
}



# --uebung
if ($uebung==1) {
   $match_uebung="-U";
}

# Ausgabe der gueltigen Werte
print "\nNach Aufgaben wird gesucht in:\n",
      "   $start_path\n";
print "\nDie Aufgabensammlungen werden erstellt in:\n",
      "   $out_path\n";
print "\nProjektverzeichnis ist:  \n",
      "  $project_dir \n";   

# sicherstellen, dass Projektverzeichnis existiert
if (not -e $config_dir){
    print "Creating $config_dir ...\n";
    system("mkdir $config_dir");
}
if (not -e $project_dir){
    print "Creating $project_dir ...\n";
    system("mkdir $project_dir");
}

# --create
if ($create ne "") {
    if ($command_line_path eq "") {
	print "Um ein Projekt zu erstellen muss",
              " --path pfadname angegeben werden.\n";
        exit;
    }
    # creating the project
    print "Erstelle Projekt $create ...\n";
    open(NEWPRO, ">$project_dir/$create") || 
        die "Cannot create $project_dir/$create\n";
    print NEWPRO "$command_line_path\n";
    close(NEWPRO);
    # making the project active, when no project is active
    $active=&problectix::get_active_project();
    if (not defined $active) {
        print "Projekt $create wird aktiviert.\n";
        # neues Link anlegen
        system("cd $project_dir; ln -s $create .project");
    }
}




# Handling the active project
$active=&problectix::get_active_project();

# Abbruch, falls kein aktives Projekt existiert
if (not defined $active){
    print "\nEs gibt kein aktives Projekt\n";
    print "Legen sie ein Projekt an mit der option --create\n";
    print "Siehe auch in der Hilfe ( --help)\n\n";
    exit;
}

print "\nDas aktive Projekt ist:  \n",
      "  $active \n\n";   

$out_ps="$out_path"."/$active";
$out_html="$out_path"."/$active";





# sicherstellen, dass Output_dir existiert
if (not -e $out_path){
    print "Creating $out_path ...\n";
    system("mkdir $out_path");
}

# ????? wird erstellt bevor Daten erzeugt werden ??????

# sicherstellen, dass Output_dir des aktiven projekts existiert
#if (not defined $active || not -e $out_ps){
#    print "Creating $out_ps ...\n";
#    system("mkdir $out_ps");
#}
#
#if (not defined $active && not -e $out_html){
#    print "Creating $out_html ...\n";
#    system("mkdir $out_html");
#}



# Start-verzeichnis-name ermitteln
# start-path = absolut
#start-dir   = Verzeichnis-Name
my @list = split(/\//,$start_path);
my $start_dir = pop @list;

# Welche Verzeichnisse durchsucht werden müssen
# Am Beginn nur das Startverzeichnis
my @verzeichnisliste=($start_dir);



#find(\&filtern, @dateiliste);



# Bald nicht mehr gebraucht
# Liste aller *.tex-Dateien im durchsuchten Verzeichnis
#@tex_dateien = sort @tex_dateien;

# print "Set: $set\n\n";

# --info
if ($info==1 or $set ne "") {
    #print "\n\nGefundene *.tex-Dateien:\n";
    #foreach my $datei (@tex_dateien) {
	#print "$datei\n";
    #}
    #exit;
  
    # Projekt-Liste zum setzen erstellen
    @projects=&problectix::get_project_list();

    print "\nProjekte:\n";

    if ($set ne "") {
        # anderes projekt aktivieren
        if (defined $projects[$set]){
           # sinnvoller wert übergeben 
           print "setze aktives Projekt auf $set\n";
           # altes Link entfernen
           print "$active_project\n";
           unlink $active_project;
           # neues Link anlegen
           system("cd $project_dir; ln -s $projects[$set] .project");
           # Projekt-Liste aktualisieren zum Anzeigen
           @projects=&problectix::get_project_list();
        } else {
           # sinnloser Wert uebergeben
	   print "\nAbbruch:\n";
           print "Es gibt kein Projekt mit dem Index $set\n";
           exit;
        }
    } else {
        # nichts tun
        #print "setze nicht\n";
    }

    # Liste aller Projekte ausgeben
    foreach my $project (@projects){        
        my @dir_listing=&problectix::get_dirlist_of_project($project);
        # Nummer des Projects ausgeben
        if ($project_number==0){
           print "   (*)";
        } else {
	   print ("   ($project_number)");
        }
        # Name des Projekts ausgeben
        print "$project\n";
        # Liste der Verzeichnisse ausgeben
        foreach my $dir (@dir_listing) {
         print "    -- $dir\n";
        }
        $project_number++;
    }
    # beenden der --info-Option
    exit;
}



# --www
if ($www==0) {
   # Aufgabensammlung als Post-Script erzeugen
   #&print_aufgabensammlung();

} elsif ($www==1) {
   # Aufgabensammlung als html/png erzeugen
   #&html_aufgabensammlung($start_path);
}




# ===========================================================================
# Aufgabensammlung erzeugen
# ==========================================================================

# Projektliste erstellen, in erstem Element ist das Standardprojekt
my @project_list=&problectix::get_project_list();
my @dir_list=&problectix::get_dirlist_of_project($project_list[0]);

&aufgabensammlung(@dir_list);


# ===========================================================================
# Subroutinen
# ==========================================================================


# moved to problectix.pm:

#sub get_active_project {
#    my $active;
#    if (-l "$active_project") {
#       $active = readlink "$active_project";
#       return $active;
#    } else {
#       return undef;
#       #return "Kein aktives Projekt";
#    }
#}


# moved to problectix.pm:

#sub get_project_list{
#    my $number=0;
#    if (defined $_[0]){
#       $number=$_[0];
#    }
#    my @projects=();
#    opendir(DIR, $project_dir) || die "Kann $project_dir nicht öffnen: $!";
#    while (defined (my $file = readdir(DIR))) {
#        # Eintrag verarbeiten
#        if (not $file eq "." and
#            not $file eq ".." and
#            not $file eq ".project" and
#            not $file=~/~/) {
#           push (@projects, $file);
#       }
#     }
#    # aktives Projekt ermitteln
#    my $active=&problectix::get_active_project();
#    unshift (@projects, "$active");
#    if ($number==0){
#       return @projects;
#    } else {
#       #$number=$number-1;
#       return $projects[$number];
#    }
#}


#sub get_dirlist_of_project {
#   my ($project) = @_;
#   my $datei="$project_dir"."/$project";
##print "$datei\n";
#   my @dirlist=();
#   open (PROJECT, "<$datei");
#   while(<PROJECT>){
#     chomp();
#     s/\s//g; # Spezialzeichen raus
#     if ($_ eq ""){next;} # Wenn Zeile Leer, dann aussteigen
#     if(/^\#/){next;} # Bei Kommentarzeichen aussteigen
#     # Homedir davorsetzen
#     $_="$home"."/$_";
#     push (@dirlist, $_);
#   }
#   close(PROJECT);
#   return @dirlist;
#}

# Nicht mehr benutzt, da Verzeichnisweise vorgegangen wird

# Erzeugt eine Liste mit *.tex-Dateien aus allen Dateien
#sub filtern {
#    if(not /$.tex/ && not /$\~/){
#       # Verzeichnisse abspeichern (absoluter Pfad)
#       #my $abs_path=$File::Find::name;
#       if (-d "$_" && $_ ne "auto") { # .-Verzeichnisse ausschliessen???
#	  # print "Verzeichnis";
#          push (@verzeichnisse, "$File::Find::name");
#       }
#       next;
#   } else {
#       push (@tex_dateien, $_);
#       #print "$_\n";
#   }
#}


# nicht mehr nötig
#sub print_aufgabensammlung {
#   open (PROBLECTIX, ">problectix.tex") || die "Fehler: $!";
#      print PROBLECTIX "\\documentclass[alles]{teacher}\n";
#   print PROBLECTIX "\\Titelu{Verzeichnis}\n";
#   print PROBLECTIX "\\Datum{}\n";
#   print PROBLECTIX "\\begin{document}\n\n";
#   # Alle Aufgaben eintragen
##   foreach my $datei (@tex_dateien) {
##       
##       print PROBLECTIX "\\nehme{$datei}\n";
##   }
#   print PROBLECTIX "\n\\end{document}\n";
#   close(PROBLECTIX);
#   system ("latex problectix.tex > /dev/null");
#   system ("dvips problectix.dvi > /dev/null");
#}

sub get_order_number{
    my ($aufgabe) = @_;
    # Standardwert
    my $order="9999";
    my $a;
    print "Aufgabe: $aufgabe\n";
    open (AUORDER, "<$aufgabe") || die "Fehler: $!";
    while (<AUORDER>){
        chomp();   
        s/\s//g;
        s/%//g;
        if (/order=/) {
	  ($a, $order)=split(/=/);
        next;
        }
    }
    close(AUORDER);
    return "$order";
}



sub png_von_aufgabe{
    # Parameter ist der absolute Dateipfad
    # der *.tex-Datei mit der Aufgabe
    my ($datei_pfad) = @_;
    my @list = split(/\//,$datei_pfad);
    my $datei = pop @list;
    my $datei_ohne_tex = $datei;
    my $order_number=&get_order_number($datei_pfad);
    $datei_ohne_tex=~s/.tex//g;
    print "$datei\n";

    open(AUFGABE, ">$out_ps/aufgabensammlung.tex");
     if ($schueler==1){
       print AUFGABE '\documentclass[arb,leer]{teacher}',"\n";
       print AUFGABE '\pagestyle{empty}',"\n";
       print AUFGABE '\gruppea',"\n";
      } elsif ($lehrer==1) {
       print AUFGABE '\documentclass[alles,leer]{teacher}',"\n";
       print AUFGABE '\pagestyle{empty}',"\n";
       print AUFGABE '\gruppea',"\n";

      } else {
	  print "No option Found\n\n";
          exit;
      }
       print AUFGABE '\begin{document}',"\n";
       # Einfügen der benötigten Dateien
       print AUFGABE '\nehme{',"$datei_ohne_tex",'}',"\n";
       if ($order==1) {
         print AUFGABE '\marginpar{',"$order_number",'}',"\n\n";
       }
       print AUFGABE '\end{document}',"\n";
    close(AUFGABE);

    system("latex temp-datei.tex > /dev/null");
    #system ("mv temp-datei.dvi $out_html"); 
    system("dvips -x2074 -y2074 -T 40cm,80cm temp-datei.dvi > /dev/null");
    # -crop 0x0 # Beschneiden
    # -geometry
    system("convert -crop 0x0 temp-datei.ps png:$out_html/${datei}-gen.png");
 
    # Temporäre Dateien löschen
    unlink "temp-datei.tex";
    unlink "temp-datei.aux";
    unlink "temp-datei.log";
    unlink "temp-datei.dvi";
    unlink "temp-datei.ps";
}





sub aufgabensammlung {
    # Übergeben wurde der Start-Pfad
    # Dieser ist nun als einziges in der Verzeichnisliste
    my @verzeichnisliste = @_;
    my @tex_list = ();
    my $work_dir;

    &verzeichnis_vorbereiten();
    &index_datei_beginnen();

   # Beginn der while-Schleife, solange es Verzeichnisse gibt
   while (1==1) {
      # Erstes Element aus der Verzeichnisliste holen 
      # (Element wird aus array entfernt)
      # $work_dir ist enthält absoluten Pfad
      $work_dir = shift(@verzeichnisliste);
 
      # Ausstieg, wenn @verzeichnisliste leer ist
      if (not defined $work_dir) {
          # Programmende
          &last_exit();
      }

      # $dir   : Verzeichnisname (ohne Pfad) 
      my @pathlist = split(/\//,$work_dir);
      my $dir = pop @pathlist;
      # Pfadliste leeren
      @pathlist = ();

      # Gibt es *.tex-Dateien
      @tex_list=&list_tex_dateien($work_dir);
   
      # Gibt es Verzeichnisse
      my @dir_list=&list_dirs($work_dir);
  
      if (defined $tex_list[0]) {
          # Tex-Dateien bearbeiten, falls Liste nicht leer
          if ($www==0) {
	      &tex_eintraege($dir,@tex_list);
          } elsif ($www==1) {
             &html_seite_erstellen($dir,@tex_list);
          }
          # Link auf diese Datei Erstellen in index.html
          if ($www==0) {
          # nichts tun
          } elsif ($www==1) {
            print INDEX '<h3><A HREF="',"$dir.html",'">',"$dir",'</A></h3>',"\n";
          }
      } elsif (not defined $dir_list[0]) {
          # mini-Überschrift erstellen (Verzeichnis ist leer)
          if ($www==0) {
             print PROBLECTIX "\n","\\section{Themengebiet: ",
                              "$dir (noch keine Aufgaben)}\n";
          } elsif ($www==1) {
             print INDEX '<h4>',"$dir"," &nbsp; (noch keine Aufgaben)",
                         '</h4>',"\n";
          }      
      } else {
          # Große Überschrift (übergeordnetes Verzeichnis)
          if ($www==0) {
   
          } elsif ($www==1) {
             print INDEX '<h1>',"$dir",'</h1>',"\n";
	  }
      }

      # Verzeichnisse in Verzeichnisliste laden
      unshift @verzeichnisliste, @dir_list;

   }# Ende der While-Schleife

}



# Diese Subroutine bekommt als Argment den Parsewert der Funktion GetOptions.
# Ist dieser nicht 1, so wurde eine Fehlerhafte Option vergeben
sub  check_options{
   my ($parse_ergebnis) = @_;
   if (not $parse_ergebnis==1){
      my @list = split(/\//,$0);
      my $scriptname = pop @list;
      print "\nSie haben bei der Eingabe der Optionen einen Fehler begangen.\n"; 
      print "Siehe Fehlermeldung weiter oben. \n\n";
      print "... $scriptname beendet sich.\n\n";
      exit;
   } else {
         print "Alle Befehls-Optionen wurden erkannt.\n";
   }

}



sub lastname_von_abs_pfad {
    # Parameter: absoluter Pfad
    # sub gibt letzter Name (Verzeichnis oder Datei) zurück
    my ($abs_pfad) = @_;
    my @pathlist = split(/\//,$abs_pfad);
    my $lastname = pop @pathlist;
    return $lastname;
}



sub list_tex_dateien {
   # Gibt alle *.tex-Dateien des übergebenen Verzeichnisses zurück
    my ($verzeichnis) = @_ ;
    my @tex_dateiliste = ();

    print "\nSuche *.tex-Dateien im Verzeichnis $verzeichnis ...\n";
    opendir(DIR, $verzeichnis) || die "Kann $verzeichnis nicht öffnen: $!";
    while (defined (my $file = readdir(DIR))) {
        # Eintrag verarbeiten
        print "Gefunden: $file     ---";
        if ($file=~/${match_uebung}.tex$/
#             && not $file=~/.~/
            ) {
            # verbessern ?????????????????
	    print "ist eine *.tex-Datei\n";
            $file="$verzeichnis"."/"."$file";
            push (@tex_dateiliste, $file);
        } else {
	    print "keine *.tex-Datei\n";
        }
        
    }
    closedir(DIR);
    return @tex_dateiliste;
}



sub list_dirs {
   # Gibt alle Verzeichnisse des übergebenen Verzeichnisses zurück
    my ($verzeichnis) = @_ ;
    my @dirs = ();
    print "\nSuche Verzeichnisse im Verzeichnis $verzeichnis ...\n";
    opendir(DIR, $verzeichnis) || die "Kann $verzeichnis nicht öffnen: $!";
    while (defined (my $eintrag = readdir(DIR))) {
        my $abs_eintrag="$verzeichnis"."/"."$eintrag";
        # Eintrag verarbeiten
        print "Gefunden. $eintrag --- ";
        if (-d $abs_eintrag &&  # verbessern ?????????????????
               $eintrag ne "auto" && 
               $eintrag ne ".xvpics" && 
               $eintrag ne "." &&
               $eintrag ne "CVS" &&
               $eintrag ne "..") {
 	    print " ist Verzeichnis\n";
            push (@dirs, $abs_eintrag);
        } else {
            print " KEIN Verzeichnis\n";  
	}
        
    }
    closedir(DIR);
    @dirs = sort @dirs;
    return @dirs;
}



sub tex_eintraege {    
   my ($name, @dateien) = @_;
   my @dateien_order=(); 
   my $aufgabe="";
   my $order_number="99999";
   print PROBLECTIX "\n","\\section{Themengebiet: $name}\n";
   foreach $aufgabe (@dateien) {
       $order_number=&get_order_number($aufgabe);
       push (@dateien_order, "$order_number"."___"."$aufgabe");
   }
   @dateien_order = sort @dateien_order;
   foreach my $string (@dateien_order) {
      ($order_number,$aufgabe) = split(/___/, $string);
      $order_number=&get_order_number($aufgabe);
      my $aufgaben_name=&lastname_von_abs_pfad($aufgabe);
      my $aufgaben_name_ohne_tex = $aufgaben_name;
      $aufgaben_name_ohne_tex=~s/.tex//g;
      print PROBLECTIX "\\nehme{$aufgaben_name_ohne_tex}\n"; 
      if ($order==1) {
         print PROBLECTIX '\marginpar{',"$order_number","}\n\n"; 
      }
  }
}



sub html_seite_erstellen {
    my ($name, @dateien) = @_;
   # Aufgabendatei erstellen
   open(AUFGABEHTML, ">$out_html/$name.html");
     print AUFGABEHTML '<html>',"\n";
     print AUFGABEHTML '<head>',"\n";
     print AUFGABEHTML '<title>Verzeichnis: &nbsp;',"$name",'</title>',"\n";
     print AUFGABEHTML '</head>',"\n";
     print AUFGABEHTML '<body bgcolor=#E8EBFF>',"\n";

    # Die Aufgaben verarbeiten
    foreach my $aufgabe (@dateien) {
       my $aufgaben_name=&lastname_von_abs_pfad($aufgabe);
       my $aufgaben_name_ohne_tex = $aufgaben_name;
       $aufgaben_name_ohne_tex=~s/.tex//g;
       my $png_name = "$aufgaben_name"."-gen.png";
       print "$aufgaben_name\n";
       #exit;

       # png-Grafik der Aufgabe erstellen
       &png_von_aufgabe($aufgabe);

       # Aufgabe einfügen in Verzeichnis.html
       print AUFGABEHTML '<h1 align="center">Einf&uuml;gebefehl:  &nbsp; &nbsp; <tt>\nehme{';
       print AUFGABEHTML "$aufgaben_name_ohne_tex";
       print AUFGABEHTML '}</tt></h1>',"\n";
       print AUFGABEHTML '<h1 align="center">','<a href=',"$aufgabe",'">Quellcode</a></h1>';
       print AUFGABEHTML '<hr noshade size="5">',"\n";
       print AUFGABEHTML '<img src="';
       print AUFGABEHTML "$png_name";
       print AUFGABEHTML '">',"\n";
       print AUFGABEHTML '<hr noshade size="5">',"\n";
       print AUFGABEHTML '<h1 align="center">Einf&uuml;gebefehl:   &nbsp; &nbsp; <tt>\nehme{';
       print AUFGABEHTML "$aufgaben_name_ohne_tex";
       print AUFGABEHTML '}</tt></h1>',"\n";
       print AUFGABEHTML "\n",'<hr noshade size="10">',"\n\n";

    }


    # Dateiende
    print AUFGABEHTML '<hr noshade size="10">',"\n";
    print AUFGABEHTML '</body>',"\n";
    print AUFGABEHTML '</html>',"\n";
 
 
}


sub verzeichnis_vorbereiten {
   #Verzeichnis anlegen
   if ($www==0) {
      # Fuer Postscript
      if (not (-e "$out_ps")){
         system ("mkdir $out_ps");
      } elsif ($renew==1) {
         rmtree("$out_ps"); 
         system ("mkdir $out_ps");
      } else {
         print "Verzeichnis $out_ps existiert bereits.\n";
         print "Mit der option --renew wird das verzeichnis\n";
         print "$out_ps mit dem gesamten Inhalt gelöscht ";
         print "und wieder neu erzeugt. \n\n";
      }
   } elsif ($www==1) {
      # Fuer HTML
      if (not (-e "$out_html")){
         system ("mkdir $out_html");
      } elsif ($renew==1) {
         rmtree("$out_html"); 
         system ("mkdir $out_html");
      } else {
         print "Verzeichnis $out_html existiert bereits.\n";
         print "Mit der option --renew wird das verzeichnis\n";
         print "$out_html mit dem gesamten Inhalt gelöscht ";
         print "und wieder neu erzeugt. \n\n";
      }
   }
}





sub index_datei_beginnen {
   if ($www==0) {
      # aufgabensammlung.tex erstellen
      open (PROBLECTIX, ">$out_ps/$active-$type_name.tex") || die "Fehler: $!";
      if ($schueler==1){
        print PROBLECTIX "\\documentclass[arb,leer]{teacher}\n";
        print PROBLECTIX "\\Titelu{Verzeichnis}\n";
        print PROBLECTIX "\\Datum{}\n";
        print PROBLECTIX "\\gruppeb\n\n";
      } elsif ($lehrer==1) {
        print PROBLECTIX "\\documentclass[alles]{teacher}\n";
        print PROBLECTIX "\\Titelu{Verzeichnis}\n";
        print PROBLECTIX "\\Datum{}\n";
        print PROBLECTIX "\\gruppeb\n\n";
      } elsif ($loesung==1) {
        print PROBLECTIX '\documentclass[lsg]{teacher}',"\n";
        print PROBLECTIX '\pagestyle{empty}',"\n";
        print PROBLECTIX '\gruppea',"\n";
      } else {
	print "Eine der Optionen:\n\n";
	print "  --schueler (Nur Aufgaben)\n";
	print "  --lehrer   (Aufgaben, Lösungen, Dateinamen, ...)\n";
	print "  --loesung  (Lösungsblatt)\n";
	print "\nmuss angegeben werden.\n\n";
 
        print "Hilfe:  --help\n\n";

	exit;
      }
      print PROBLECTIX "\\begin{document}\n\n";
   } elsif ($www==1) {
      # index.html erstellen
      open (INDEX, ">$out_html/index.html") || die "Fehler: $!";
      print INDEX "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\">\n";
      print INDEX "<html>\n<head>\n";
      print INDEX "<TITLE>Aufgabensammlung</TITLE>\n";
      print INDEX "</head>\n<body bgcolor=#E8EBFF>\n";
      # Titel noch grösser (Bild???????????????)
      print INDEX "<h1>Aufgabensammlung</h1>\n";
   }
}



sub last_exit {
   if ($www==0) {
      # aufgabensammlung schliessen
      print PROBLECTIX "\n\\end{document}\n";
      close(PROBLECTIX);
      print "here  I am: $out_ps\n";
  print "TEX: $active-$type_name.tex\n";

      # *.tex in *.ps umwandeln
#      system ("cd $out_ps; latex $active-$type_name.tex > dev/null");
      #system("/home/bz/cvs-workspace/tas","$active-$type_name");
      #system ("/usr/bin/latex Verdampfer-schueler.tex");


# so tuts
#system ("/home/bz/cvs-workspace/tas","/home/bz/problectix-data/Verdampfer/","Verdampfer-schueler");
system ("problectix.sh","$out_ps","$active-$type_name");



#      system ("cd $out_ps; dvips $active-$type_name.dvi ");
#      system ("mv temp-datei.tex  $out_ps/aufgabensammlung.tex");
#      system ("mv temp-datei.dvi  $out_ps/aufgabensammlung.dvi");
#      system ("mv temp-datei.ps  $out_ps/aufgabensammlung.ps");

#      system ("mv temp-datei.tex  $out_ps/$active-$type_name.tex");
#      system ("mv temp-datei.dvi  $out_ps/$active-$type_name.dvi");
#      system ("mv temp-datei.ps  $out_ps/$active-$type_name.ps");
      # Temporäre Dateien löschen

#      unlink "temp-datei.aux";
#      unlink "temp-datei.log";
   } elsif ($www==1) {
      # Index.html schliessen
      print INDEX "</body>\n<html>\n";
      print INDEX "\n";
      close(INDEX);
   }
   # BEENDEN
   print "\nVerzeichnisliste ist abgearbeitet. Programmende\n\n";
   exit;
}




#sub last_exit {
#   if ($www==0) {
#      # aufgabensammlung schliessen
#      print PROBLECTIX "\n\\end{document}\n";
#      close(PROBLECTIX);
#      # *.tex in *.ps umwandeln
#      system ("latex temp-datei.tex");
#      system ("dvips temp-datei.dvi ");
##      system ("mv temp-datei.tex  $out_ps/aufgabensammlung.tex");
##      system ("mv temp-datei.dvi  $out_ps/aufgabensammlung.dvi");
##      system ("mv temp-datei.ps  $out_ps/aufgabensammlung.ps");
#      system ("mv temp-datei.tex  $out_ps/$active-$type_name.tex");
#      system ("mv temp-datei.dvi  $out_ps/$active-$type_name.dvi");
#      system ("mv temp-datei.ps  $out_ps/$active-$type_name.ps");
#      # Temporäre Dateien löschen
#      unlink "temp-datei.aux";
#      unlink "temp-datei.log";
#   } elsif ($www==1) {
#      # Index.html schliessen
#      print INDEX "</body>\n<html>\n";
#      print INDEX "\n";
#      close(INDEX);
#   }
#   # BEENDEN
#   print "\nVerzeichnisliste ist abgearbeitet. Programmende\n\n";
#   exit;
#}










