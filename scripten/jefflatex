#!/usr/bin/perl
# Dieses Script (jefflatex) wurde von Rüdiger Beck erstellt
# Es ist freie Software
# Bei Fehlern wenden Sie sich bitte an mich.
# jeffbeck@web.de  oder  jeffbeck@gmx.de

# Information about calling this script from within emacs
# can be found in the README (Debian: /usr/share/doc/problectix/README) 

use strict;
use Getopt::Long;
Getopt::Long::Configure ("bundling");

my $vorspann=0;
my $found = 0;
my @pdf_viewer=();
my @ps_viewer=();

# ===========================================================================
# Konfig-Dateien sourcen
# ==========================================================================

# systemweite Konfiguration
my $sys_config = "/etc/problectix/problectix.conf";

# userabhaengige Konfiguration
my $config_dir="$ENV{'HOME'}/.problectix";
my $user_config="$config_dir"."/.problectix";

# Abbruch, falls sysweite config fehlt
if (not -e $sys_config) {
    print "$sys_config does not exist. exiting ...\n\n";
    exit;
} else {
   # werte der sysconfig einlesen
   { package SysConf ; do "$sys_config"}
    @pdf_viewer = @SysConf::pdf_viewer;
    @ps_viewer = @SysConf::ps_viewer;
}

# userweite config sourcen, falls existent
if (-e "$user_config") {
   { package UserConf ; do "$user_config"}
    @pdf_viewer = @UserConf::pdf_viewer;
    @ps_viewer = @UserConf::ps_viewer;
}


# ===========================================================================
# Optionen verarbeiten
# ==========================================================================

# Variablen für Optionen
my $pdf=0;
my $presentation=0;
my $file ="";
my $tex_file="";

print "##### jefflatex is parsing Options ...\n";

# Parsen der Optionen
my $testopt=GetOptions(
           "pdf" => \$pdf,
           "presentation" => \$presentation,
           "file=s" => \$file
          );

# Abbruch bei leerer Datei
if ($file eq ""){
    print "Keine Datei angegeben (Datei: $tex_file) \n";
    exit;
}


# Dateinamen mit entsprechenden Endungen
if (-e "./$file"){
     $tex_file = "$file";
     $file=~s/$\.tex//g;
} else {
     $tex_file = "$file".".tex";
}

print "Using $tex_file and as file $file \n";

my $tex_temp_file = "$file"."-temp.tex";



# Abbruch bei leerer Datei
if (not -e "./$tex_file"){
    print "File does not exist: $tex_file , $file\n\n";
    exit;
}

#exit;

&check_options($testopt);

############################################################
# Start
############################################################

# ist Vorspann voranzusetzten?
$vorspann=&check_vorspann();

if ($vorspann==0){
   ############################################################
   # Ohne Vorspann
   ############################################################
   &compile_tex();
   &viewer();

} else {
   ############################################################
   # Mit Vorspann
   ############################################################
   print "##### generating $tex_temp_file\n";
   open (TEXTEMP, ">$tex_temp_file");
   print TEXTEMP '\documentclass[arb,arblsg]{teacher}';
   print TEXTEMP "\n\n";
   print TEXTEMP '\gruppea';
   print TEXTEMP "\n\n";
   print TEXTEMP '\begin{document}';
   print TEXTEMP "\n\n";
   open (TEX, $tex_file);
   while (<TEX>) {
       print TEXTEMP $_;
   }
   print TEXTEMP '\end{document}';

   &compile_tex();
   &viewer();
}

# Ende
print "##### jefflatex has compiled everything ---> done\n";





############################################################
# Subs
############################################################
sub  check_options{
   my ($parse_ergebnis) = @_;
   if (not $parse_ergebnis==1){
      my @list = split(/\//,$0);
      my $scriptname = pop @list;
      print "\nSie haben bei der Eingabe der ",
            "Optionen einen Fehler begangen.\n"; 
      print "Siehe Fehlermeldung weiter oben. \n\n";
      print "... $scriptname beendet sich.\n\n";
      exit;
   } else {
         print "Alle Befehls-Optionen wurden erkannt.\n\n";
   }

}


sub check_vorspann {
   open (TEXFILE, $tex_file);
   print "##### jefflatex is checking type of $tex_file:\n";
   while (<TEXFILE>){
     #if ($found==1){next};
     if (/\\begin{aufgabe}/){
        # Aufgabendatei gefunden
        print "##### Type: Aufgabendatei\n";
        # Vorspann ansetzen
        #$vorspann=1;
        return 1;
        #$found=1;
     } elsif (/\\documentclass/) {
        # reguläre TEX-Datei
        print "##### Type: Vollständige TEX-Datei\n";
        # kein Vorspann
        #$vorspann=0;
        return 0;
        #$found=1;
     } 
   }
}



sub compile_tex {
   my $work_base_file="";
   # Base-Datei festlegen
    if ($vorspann==0){
	$work_base_file=$file;
    } else {
	$work_base_file="$file"."-temp";
    }
   # Andere Dateinamen festlegen
   my $tex_file = "$work_base_file".".tex";
   my $dvi_file = "$work_base_file".".dvi";
   my $log_file = "$work_base_file".".log";
   my $aux_file = "$work_base_file".".aux";
   # what to do
   if ($pdf==1) {
       # pdflatexen
       print "##### jefflatex is starting pdflatex on $tex_file ...\n";
       system("pdflatex $tex_file");
       print "##### ending pdflatex ...\n";
   } elsif ($presentation==1) {
       # latexen
       print "##### jefflatex is starting latex on $tex_file ...\n";
       system("latex $tex_file");
       system("latex $tex_file");
       print "##### ending latex ...\n";
       # pdf erzeugen
       print "##### jefflatex is  starting dvipdf on $dvi_file ...\n";
       system("dvipdf $dvi_file");
       system("dvipdf $dvi_file");
       print "##### ending dvipdf ...\n";

   } else {
       #latexen und dvips
       print "##### jefflatex is starting Latex on $tex_file ...\n";
       system("latex $tex_file");
       system("latex $tex_file");
       print "##### ending Latex ...\n";
       # Postscript erzeugen
       print "##### jefflatex is starting dvips on $dvi_file ...\n";
       system("dvips $dvi_file");
       print "#####ending dvips ...\n";
   }
   # Aufräumen
    if ($vorspann==0){
        # nix
    } else {
	&clean($tex_file);
	&clean($dvi_file);
	&clean($log_file);
	&clean($aux_file);
    }
}



sub viewer {
   my $found=0;
   my $work_base_file="";
   # Base-Datei festlegen
    if ($vorspann==0){
	$work_base_file=$file;
    } else {
	$work_base_file="$file"."-temp";
    }
   # Andere Dateinamen festlegen
   my $ps_file  = "$work_base_file".".ps";
   my $pdf_file = "$work_base_file".".pdf";

   if ($pdf==1 or $presentation==1) {
       # pdf-viewer
       print "##### jefflatex is starting a PDF-viewer on $file ...\n";
       foreach my $viewer (@pdf_viewer) {
	  if ($found==1){next;};
          if (-e "$viewer") {
              if ($viewer=~/\/xpdf/ and $presentation==1){
                 system("$viewer -fullscreen $pdf_file");
              } else {
                 system("$viewer $pdf_file");
	      }
              $found=1;
          }
       }
       print "##### ending PDF-viewer ...\n";
   } else {
       #ps-viewer
       print "##### jefflatex is starting a PS-viewer on $file ...\n";
       foreach my $viewer (@ps_viewer) {
	  if ($found==1){next;};
          if (-e "$viewer") {
             system("$viewer $ps_file");
             $found=1;
          }

       }
       print "##### ending PS-viewer ...\n";
   }

   # Fehler, wenn kein Viewer gefunden wurde
   if ($found==0){
       print "Konnte keinen Viewer finden!\n";
       print "Bitte prüfen Sie:\n";
       print "   $sys_config  \n";
       print "   $user_config  \n";
   }

   # Temporäre Dateien löschen
    if ($vorspann==0){
	# nix
    } else {
        &clean($ps_file);
        &clean($pdf_file);
    }
}





sub clean {
    my ($delete_file) = @_;
    print "##### cleaning up $delete_file \n";
    if (-e $delete_file) {
	system("rm $delete_file");
    }
}



