#!/usr/bin/perl
# Dieses Script (jefflatex) wurde von Rüdiger Beck erstellt
# Es ist freie Software
# Bei Fehlern wenden Sie sich bitte an mich.
# jeffbeck@web.de  oder  jeffbeck@gmx.de

# Information about calling this script from within emacs
# can be found in the README (Debian: /usr/share/doc/problectix/README) 

use strict;
use Getopt::Long;
Getopt::Long::Configure ("bundling");
use File::Basename qw( basename
                       dirname
                       fileparse
                     );       
my $vorspann=0;
my $versions=1;
my $found = 0;
my @pdf_viewer=();
my @ps_viewer=();
my @png_viewer=();

# ===========================================================================
# Konfig-Dateien sourcen
# ==========================================================================

# systemweite Konfiguration
my $sys_config = "/etc/problectix/problectix.conf";

# userabhaengige Konfiguration
my $config_dir="$ENV{'HOME'}/.problectix";
my $user_config="$config_dir"."/.problectix";

# Abbruch, falls sysweite config fehlt
if (not -e $sys_config) {
    print "$sys_config does not exist. exiting ...\n\n";
    exit;
} else {
   # werte der sysconfig einlesen
   { package SysConf ; do "$sys_config"}
    @pdf_viewer = @SysConf::pdf_viewer;
    @ps_viewer = @SysConf::ps_viewer;
    @png_viewer = @SysConf::png_viewer;
}

# userweite config sourcen, falls existent
if (-e "$user_config") {
   { package UserConf ; do "$user_config"}
    @pdf_viewer = @UserConf::pdf_viewer;
    @ps_viewer = @UserConf::ps_viewer;
    @png_viewer = @UserConf::png_viewer;
}

# ===========================================================================
# Optionen verarbeiten
# ==========================================================================

# Variablen für Optionen
my $help=0;
my $pdf=0;
my $png=0;
my $presentation=0;
my $file ="";
my $noview =0;
my $tex_file="";
my $source_dir="";

print "##### jefflatex is parsing Options ...\n";

# Parsen der Optionen
my $testopt=GetOptions(
           "help|h" => \$help,
           "pdf" => \$pdf,
           "png" => \$png,
           "presentation" => \$presentation,
           "file|f=s" => \$file,
           "noview|noviewer" => \$noview
          );

# --help
if ($help==1){
   print "\njefflatex (pronounced jeff-la-tex) compiles (*.tex -> *.ps/*.pdf)",
         " a latex source file and opens an appropriate viewer to",
         " display the resulting *.ps/*.pdf\n";

   # optionen
   print('
Options
  -h  / --help
  --pdf
  --png
  --presentation
  --file name
  --noview / --noviewer

Please see the jefflatex(1) man page for full documentation
');
   print "\n";

}


# Exit, if no file was given
if ($file eq ""){
    print "No path to a file given  (Use:  -f path/to/a/file.tex)\n";
    exit;
}


# Calculate the full path (including .tex)
if (-e "$file"){
     # if the file exists
     $tex_file = "$file";
     #$file=~s/.tex$//g;
} else {
     $tex_file = "$file".".tex";
}

# Exit if file doesnt exist
if (not -e "$tex_file"){
    print "Files do not exist, I looked for:\n",
          "   $tex_file\n",
          "   $file\n\n";
    exit;
}


# Calculate path, ...
my ($base,$source_dir,$type) = fileparse("$tex_file",".tex");

# convert to absolute paths
# get the absolute path of --dir Directory
chdir "$source_dir" || 
   die "Kann nicht nach $source_dir wechseln";
my $abs_path=`pwd`;
chomp($abs_path);
print "Abs. Path: $abs_path\n";

$tex_file=$abs_path."/".$base.$type;

($base,$source_dir,$type) = fileparse("$tex_file",".tex");


my $tex_temp_file = "$base"."-temp"."$type";

print "Path:      $source_dir\n";
print "Base:      $base\n";
print "Type:      $type\n";
print "Temp:      $tex_temp_file\n";




&check_options($testopt);

############################################################
# Start
############################################################

# ist Vorspann voranzusetzten?
print "##### jefflatex is checking type of $tex_file ...\n";
($vorspann,$versions)=&check_file();
print "Versions:  $versions \n";
print "Vorspann:  $vorspann \n";
print "##### ... checking type of $tex_file is done\n\n";

if ($png==1){
    $versions=1;
}


if ($vorspann==0){
   ############################################################
   # Ohne Vorspann
   ############################################################
   &compile_tex();
   if ($noview==0){
      &viewer();
   }

} else {
   ############################################################
   # Mit Vorspann
   ############################################################
   my @version_line=("\\gruppea\n","\\gruppeb\n","\\gruppec\n");
   my @version_color=("rosa","lila","rot");
   my @version_string=("Gruppe A","Gruppe B","Gruppe C");

   my @options=();
   if ($png==1){
      @options=("arblsg","lsg");
   } else {
      @options=("kamulti","arblsg","lsg");
   }

   print "##### generating $tex_temp_file\n";
   open (TEXTEMP, ">$tex_temp_file");
#   print TEXTEMP '\documentclass[arb,arblsg]{teacher}';
   print TEXTEMP '\documentclass[]{teacher}',"\n";
#   print TEXTEMP '\sbox{\dateiname}{\jobname \RCSMaster}',"\n";
   if ($png==1){
      print TEXTEMP '\special{papersize=210mm,897mm}',"\n";
      print TEXTEMP '\pagestyle{empty}',"\n";
   }
   print TEXTEMP "\n\n";
   print TEXTEMP "\\begin{document}\n";
   print TEXTEMP "\\sbox{\\dateiname}{$base\\RCSMaster}\n";

   print TEXTEMP '\setcounter{aufgabennummer}{0}',"\n";
   if ($png==1){
      print TEXTEMP '\enlargethispage{800mm}',"\n";
   }
   print TEXTEMP '\cfoot{}',"\n";
   print TEXTEMP "\n\n";
   open (TEX, $tex_file);
   my $i;
   my $index;
   for ($i = 1; $i <= $versions; $i++) {  # count from 1 to $versions
      $index=$i-1;
      print"Working on Version $i (Index: $index)...\n";

      foreach my $option (@options){
	 my $file=$option."-format";
         print TEXTEMP '\setcounter{aufgabennummer}{0}',"\n";
         print TEXTEMP "\\input{$file} \n";

         print TEXTEMP "\\setcounter{gruppeninfo}{2} \n";
         print TEXTEMP "\\bigskip\\par \n";
         print TEXTEMP "\\setlength{\\fboxrule}{0.75mm} \n";
         print TEXTEMP "\\framebox[\\textwidth]{\\rule[-2mm]{0mm}{7.5mm}\\Large \\bfseries Option: $option}\n";
         print TEXTEMP "\\bigskip \\par\n"; 

         print "Adding Line--l: $version_line[$index]"; 
         print TEXTEMP "$version_line[$index]"; 
         print TEXTEMP "\\chead{\\bfseries \\Large \\textcolor{$version_color[$index]}{$version_string[$index]}}\n";

         open (TEX, $tex_file);
         while (<TEX>) {
             print TEXTEMP $_;
         }
         close(TEX);
     }
     if ($i <= $versions){
         print TEXTEMP "\n\\newpage\n\n"; 
     }
   }

   print TEXTEMP '\end{document}';

   &compile_tex();   
   if ($noview==0){
      &viewer();
   }
}

# Ende
print "##### jefflatex has compiled everything ---> done\n";





############################################################
# Subs
############################################################
sub  check_options{
   my ($parse_ergebnis) = @_;
   if (not $parse_ergebnis==1){
      my @list = split(/\//,$0);
      my $scriptname = pop @list;
      print "\nSie haben bei der Eingabe der ",
            "Optionen einen Fehler begangen.\n"; 
      print "Siehe Fehlermeldung weiter oben. \n\n";
      print "... $scriptname beendet sich.\n\n";
      exit;
   } else {
         print "Alle Befehls-Optionen wurden erkannt.\n\n";
   }

}


sub check_file {
   my @result=(2,1); # (vorpann erforderlich, number)
   open (TEXFILE, $tex_file);
   while (<TEXFILE>){
     # check vorspann
     if (/\\documentclass/) {
        # reguläre TEX-Datei
        print "##### Type: Complete TEX-File\n";
        # kein Vorspann notwendig
        $result[0]=0; 
        return @result;
     } elsif (/\\begin{aufgabe}/){
        # Aufgabendatei gefunden
        # Vorspann ansetzen
        if (not $result[0]==0){
           print "##### Type: Aufgabendatei\n";
           $result[0]=1;
        }
     }

     if (/\\abc/) {
        $result[1]=3; 
     } elsif (/\\ab/){
        if ($result[1]=1) {
           $result[1]=2;
       }
     }
   }
   return @result;
}



sub compile_tex {
   my $work_base_file="";
   # Base-Datei festlegen
    if ($vorspann==0){
#	$work_base_file=$file;
	$work_base_file=$base;
    } else {
	$work_base_file="$base"."-temp";
    }
   # Andere Dateinamen festlegen
   my $tex_file = "$work_base_file".".tex";
   my $dvi_file = "$work_base_file".".dvi";
   my $ps_file = "$work_base_file".".ps";
   my $png_file = "$work_base_file".".png";
   my $log_file = "$work_base_file".".log";
   my $aux_file = "$work_base_file".".aux";
   # what to do
   if ($pdf==1) {
       # pdflatexen
       print "##### jefflatex is starting pdflatex on:\n  $tex_file \n...\n";
       system("cd $source_dir; pdflatex $tex_file");
       print "##### ending pdflatex ...\n";
   } elsif ($presentation==1) {
       # latexen
       print "##### jefflatex is starting latex on:\n  $tex_file \n...\n";
       system("cd $source_dir; latex $tex_file");
       system("cd $source_dir; latex $tex_file");
       print "##### ending latex ...\n";
       # pdf erzeugen
       print "##### jefflatex is  starting dvipdf on:\n  $dvi_file \n...\n";
       system("cd $source_dir; dvipdf $dvi_file");
       system("cd $source_dir; dvipdf $dvi_file");
       print "##### ending dvipdf ...\n";
   } elsif ($png==1) {
       # latexen
       print "##### jefflatex is starting latex on:\n  $tex_file \n...\n";
       system("cd $source_dir; latex $tex_file");
#       system("cd $source_dir; latex $tex_file");
       print "##### ending latex ...\n";
       # Postscript erzeugen
       print "##### jefflatex is starting dvips on:\n  $dvi_file \n...\n";
       print "$dvi_file in $source_dir\n";
       system("cd $source_dir; dvips -x2074 -y2074 -T 50cm,120cm $dvi_file");
       print "#####ending dvips ...\n";
       # png erzeugen
       print "##### jefflatex is converting: \n  $ps_file\n to:\n  $png_file\n \n...\n";
       system("cd $source_dir; convert -crop 0x0 $ps_file png:$png_file");
       print "#####ending convert ...\n";

   } else {
       #latexen und dvips
       print "##### jefflatex is starting Latex on:\n  $tex_file \n...\n";
       system("cd $source_dir; latex $tex_file");
       system("cd $source_dir; latex $tex_file");
       print "##### ending Latex ...\n";
       # Postscript erzeugen
       print "##### jefflatex is starting dvips on:\n  $dvi_file \n...\n";
       system("cd $source_dir; dvips $dvi_file");
       print "#####ending dvips ...\n";
   }
   # Aufräumen
    if ($vorspann==0){
        # nix
    } else {
	&clean($tex_file);
	&clean($dvi_file);
	&clean($log_file);
	&clean($aux_file);
        if ($png==1){
	   &clean($ps_file);
        }
    }
}



sub viewer {
   my $found=0;
   my $work_base_file="";
   # Base-Datei festlegen
    if ($vorspann==0){
	$work_base_file=$base;
    } else {
	$work_base_file="$base"."-temp";
    }
   # Andere Dateinamen festlegen
   my $ps_file  = "$work_base_file".".ps";
   my $pdf_file = "$work_base_file".".pdf";
   my $png_file = "$work_base_file".".png";

   if ($pdf==1 or $presentation==1) {
       # pdf-viewer
       print "##### jefflatex is starting a PDF-viewer on $pdf_file ...\n";
       foreach my $viewer (@pdf_viewer) {
	  if ($found==1){next;};
          if (-e "$viewer") {
              if ($viewer=~/\/xpdf/ and $presentation==1){
                 system("$viewer -fullscreen $pdf_file");
              } else {
                 system("$viewer $pdf_file");
	      }
              $found=1;
          }
       }
       print "##### ending PDF-viewer ...\n";
   } elsif ($png==1) {
       # png-viewer
       print "##### jefflatex is starting a PNG-viewer on $png_file ...\n";
       foreach my $viewer (@png_viewer) {
	  if ($found==1){next;};
          if (-e "$viewer") {
	      print "Viewer= $viewer\n";
                 system("$viewer $png_file");
              $found=1;
          }
       }
       print "##### ending PDF-viewer ...\n";


   } else {
       #ps-viewer
       print "##### jefflatex is starting a PS-viewer on $ps_file ...\n";
       foreach my $viewer (@ps_viewer) {
	  if ($found==1){next;};
          if (-e "$viewer") {
             system("$viewer $ps_file");
             $found=1;
          }

       }
       print "##### ending PS-viewer ...\n";
   }

   # Fehler, wenn kein Viewer gefunden wurde
   if ($found==0){
       print "Konnte keinen Viewer finden!\n";
       print "Bitte prüfen Sie:\n";
       print "   $sys_config  \n";
       print "   $user_config  \n";
   }

   # Temporäre Dateien löschen
    if ($vorspann==0){
	# nix
    } else {
        &clean($ps_file);
        &clean($pdf_file);
        &clean($png_file);
    }
}





sub clean {
    my ($delete_file) = @_;
    if (-e $delete_file) {
        print "##### cleaning up $delete_file \n";
	system("rm $delete_file");
    }
}



