#!/usr/bin/perl
# Dieses Script (jefflatex) wurde von Rüdiger Beck erstellt
# Es ist freie Software
# Bei Fehlern wenden Sie sich bitte an mich.
# jeffbeck@web.de  oder  jeffbeck@gmx.de

# Information about calling this script from within emacs
# can be found in the README (Debian: /usr/share/doc/problectix/README) 

use strict;
use Getopt::Long;
Getopt::Long::Configure ("bundling");
use Spreadsheet::Read;
use File::Basename qw( basename
                       dirname
                       fileparse
                     );       
my $spsh;
my $spreadsheet_file="";
my %spsh_commands=(
                   2 , '\ab{',
                   3 , '\abc{',
                   4 , '\abcd{',
                   5 , '\abcde{',
                   6 , '\abcdef{',
                   7 , '\abcdefg{',
                   8 , '\abcdefgh{',
                   );

my %file_info=();
$file_info{'order'}=0;
$file_info{'alloptions'}=0;
$file_info{'group-commands'}=1;
$file_info{'spreadsheet'}=0;


my $found=0;
my @pdf_viewer=();
my @ps_viewer=();
my @png_viewer=();

# ===========================================================================
# Konfig-Dateien sourcen
# ==========================================================================

# systemweite Konfiguration
my $sys_config = "/etc/problectix/problectix.conf";

# userabhaengige Konfiguration
my $config_dir="$ENV{'HOME'}/.problectix";
my $user_config="$config_dir"."/.problectix";

# Abbruch, falls sysweite config fehlt
if (not -e $sys_config) {
    print "$sys_config does not exist. exiting ...\n\n";
    exit;
} else {
   # werte der sysconfig einlesen
   { package SysConf ; do "$sys_config"}
    @pdf_viewer = @SysConf::pdf_viewer;
    @ps_viewer = @SysConf::ps_viewer;
    @png_viewer = @SysConf::png_viewer;
}

# userweite config sourcen, falls existent
if (-e "$user_config") {
   { package UserConf ; do "$user_config"}
    @pdf_viewer = @UserConf::pdf_viewer;
    @ps_viewer = @UserConf::ps_viewer;
    @png_viewer = @UserConf::png_viewer;
}

# ===========================================================================
# Optionen verarbeiten
# ==========================================================================

# Schalter
my $a5_landscape=0;
my $a5_landscape_repeat=0;

# Variablen für Optionen
my $help=0;
my $pdf=0;
my $png=0;
my $silent_dvips=0;
my $dvips_string="";
my $presentation=0;
my $file ="";
my $noview =0;
my $tex_file="";
my $source_dir="";
my $pngwidth="980";

print "##### jefflatex is parsing Options ...\n";

# Parsen der Optionen
my $testopt=GetOptions(
           "help|h" => \$help,
           "pdf" => \$pdf,
           "png" => \$png,
           "silent-dvips" => \$silent_dvips,
           "pngwidth=i" => \$pngwidth,
           "presentation" => \$presentation,
           "file|f=s" => \$file,
           "noview|noviewer" => \$noview,
          );



# --help
if ($help==1){
   print "\njefflatex (pronounced jeff-la-tex) compiles (*.tex -> *.ps/*.pdf)",
         " a latex source file and opens an appropriate viewer to",
         " display the resulting *.ps/*.pdf\n";

   # optionen
   print('
Options
  -h  / --help
  --pdf
  --png
  --pngwidth pixelnum
  --presentation
  --file name
  --noview / --noviewer

Please see the jefflatex(1) man page for full documentation
');
   print "\n";

}


# --silent-dvips
if ($silent_dvips==1){
    $dvips_string="> /dev/null 2>&1";
    print "HERE\n";
}


# Exit, if no file was given
if ($file eq ""){
    print "No path to a file given  (Use:  -f path/to/a/file.tex)\n";
    exit;
}


# calculate width
my $width=$pngwidth*2-7;

# Calculate the full path (including .tex)
if (-e "$file"){
     # if the file exists
     $tex_file = "$file";
     #$file=~s/.tex$//g;
} else {
     $tex_file = "$file".".tex";
}

# Exit if file doesnt exist
if (not -e "$tex_file"){
    print "Files do not exist, I looked for:\n",
          "   $tex_file\n",
          "   $file\n\n";
    exit;
}


# Calculate path, ...
my ($base,$source_dir,$type) = fileparse("$tex_file",".tex");

# convert to absolute paths
# get the absolute path of --dir Directory
chdir "$source_dir" || 
   die "Kann nicht nach $source_dir wechseln";
my $abs_path=`pwd`;
chomp($abs_path);
print "Abs. Path: $abs_path\n";

$tex_file=$abs_path."/".$base.$type;

($base,$source_dir,$type) = fileparse("$tex_file",".tex");


my $tex_temp_file = "$base"."-temp"."$type";

print "Path:      $source_dir\n";
print "Base:      $base\n";
print "Type:      $type\n";
print "Temp:      $tex_temp_file\n";




&check_options($testopt);

############################################################
# Start
############################################################

# ist Vorspann voranzusetzten?
print "##### jefflatex is checking type of \n$tex_file\n";
&check_file();
print "   ### Versions    : $file_info{'group-commands'}\n";
print "   ### Filetype    : $file_info{'type'} \n";
print "   ### alloptions  : $file_info{'alloptions'} \n";
print "   ### order       : $file_info{'order'}\n";
print "   ### Spreadsheet : $file_info{'spreadsheet'} ($spreadsheet_file) \n";

print "##### ... checking type of \n$tex_file \n##### is done\n\n";

exit;

if ($png==1){
    $file_info{'group-commands'}=1;
}



if ($file_info{'spreadsheet'}==1){
   #my $sphs = ReadData ("test.ods");
   $spsh = ReadData ($spreadsheet_file);
}






############################################################
# Datei verändern
############################################################
my @version_line=("\\gruppea\n","\\gruppeb\n","\\gruppec\n","\\grupped\n",
                  "\\gruppee\n","\\gruppef\n","\\gruppeg\n","\\gruppeh\n");
my @version_color=("rosa","lila","rot","orange",
                   "rosa2","lila2","rot2","orange2");
my @version_string=("Gruppe A","Gruppe B","Gruppe C","Gruppe D",
                    "Gruppe E","Gruppe F","Gruppe G","Gruppe H");

my @options=();
if ($png==1){
    @options=("","lsg");
} elsif ($file_info{'alloptions'}==1) {
    @options=("",
              "ka","kalsg",
              "kamulti","kamultilsg",
              "exam","examlsg",
              "arb","arblsg",
              "col","lsg","slsg");
} elsif ( $file_info{'type'} eq "texfile" ) {
    @options=("vorspannexists");
} else {
    @options=("","kamultilsg","kamulti","lsg");
}

print "##### generating $tex_temp_file in $file_info{'group-commands'} versions\n";
open (TEXTEMP, ">$tex_temp_file");

############################################################
# Vorspann voransetzen
############################################################
if ( $file_info{'type'} eq "problemfile" ){
    print "Adding vorspann\n";
    print TEXTEMP '\documentclass[]{teacher}',"\n";
    if ($png==1){
        print TEXTEMP '\special{papersize=210mm,2897mm}',"\n";
        print TEXTEMP '\pagestyle{empty}',"\n";
    }
    print TEXTEMP "\n\n";
    print TEXTEMP "\\begin{document}\n";
    print TEXTEMP "\\sbox{\\dateiname}{$base\\RCSMaster}\n";

    print TEXTEMP '\setcounter{aufgabennummer}{0}',"\n";
    if ($png==1){
        print TEXTEMP '\enlargethispage{2800mm}',"\n";
    }
    print TEXTEMP '\cfoot{}',"\n";
    print TEXTEMP "\n\n";
}

open (TEX, $tex_file);
my $i;
my $index;
for ($i = 1; $i <= $file_info{'group-commands'}; $i++) {  # count from 1 to $file_info{'group-commands'}
    $index=$i-1;
    print"Working on Version $i (Index: $index)...\n";

    foreach my $option (@options){
        $option="all" if $option eq "";
        my $optionstring="";
        if ($option eq "all"){
            $optionstring="[ ]";
	} else {
            $optionstring=$option;
	}
	my $file=$option."-format";

        if ($option ne "vorspannexists"){
            print TEXTEMP '\setcounter{aufgabennummer}{0}',"\n";
            print TEXTEMP "\\input{$file} \n";
            print TEXTEMP "\\bigskip\\par \n";
            print TEXTEMP "\\setlength{\\temp}{\\fboxrule} \n";
            print TEXTEMP "\\setlength{\\fboxrule}{0.75mm}% \n";
            print TEXTEMP "\\framebox[\\textwidth]{\\rule[-2mm]{0mm}{7.5mm}".
                          "\\Large \\bfseries Option: $optionstring}\n";
            # print TEXTEMP "\\setlength{\\fboxrule}{0.3mm} \n";
            print TEXTEMP "\\setlength{\\fboxrule}{\\temp}% \n";

            print TEXTEMP "\\bigskip \\par\n"; 

            print "   Adding Line--l: $version_line[$index]"; 
            print TEXTEMP "$version_line[$index]"; 
            print TEXTEMP "\\chead{\\bfseries \\Large ".
                  "\\textcolor{$version_color[$index]}{$version_string[$index]}}\n";
	}

        open (TEX, $tex_file);
        while (<TEX>) {
            if (/^%/){
                print "Comment: $_";
                next;
            }
            ##################################################
            # group count
            ##################################################
            while (/\\ab{/) {
                &check_groups(2);
                $_=~s/\\ab{/\\zb{/;
            }
            $_=~s/\\zb{/\\ab{/;

            while (/\\abc{/) {
                &check_groups(3);
                $_=~s/\\abc{/\\zbc{/;
            }
            $_=~s/\\zbc{/\\abc{/;

            while (/\\abcd{/) {
                &check_groups(4);
                $_=~s/\\abcd{/\\zbcd{/;
            }
            $_=~s/\\zbcd{/\\abcd{/;

            while (/\\abcde{/) {
                &check_groups(5);
                $_=~s/\\abcde{/\\zbcde{/;
            }
            $_=~s/\\zbcde{/\\abcde{/;

            while (/\\abcdef{/) {
                &check_groups(6);
                $_=~s/\\abcdef{/\\zbcdef{/;
            }
            $_=~s/\\zbcdef{/\\abcdef{/;

            while (/\\abcdefg{/) {
                &check_groups(7);
                $_=~s/\\abcdefg{/\\zbcdefg{/;
            }
            $_=~s/\\zbcdefg{/\\abcdefg{/;

            while (/\\abcdefgh{/) {
                &check_groups(8);
                $_=~s/\\abcdefgh{/\\zbcdefgh{/;
            }
            $_=~s/\\zbcdefgh{/\\abcdefgh{/;



            ##################################################
            # spreadsheet modification
            ##################################################
            # cell
            while (/\\spshcell{([0-9]+)}{([A-Z0-9]+)}/) {
                my $spreadsheet_table=$1;
                my $spreadsheet_cell=$2;

                #my $cell = $spsh->[1]{C6}, "\n"; # content of field A3 of sheet 1
                my $cell_content = $spsh->[$spreadsheet_table]{$spreadsheet_cell};
                if (not defined $cell_content){
                    print "   spsh reference NOT LINKED: ",
                          "${spreadsheet_file}:${spreadsheet_table}:${spreadsheet_cell}\n";
                    $cell_content="\\textcolor{red}{${spreadsheet_table}".
			":${spreadsheet_cell}}";
                } else {
                    print "* spshcell reference found: ",
                          "${spreadsheet_file}:${spreadsheet_table}:${spreadsheet_cell}\n";
                }
                if ($file_info{'documentclass'}{'debug'}==1){
                    my $debug_content="\\textcolor{red}{$cell_content}".
                       "\\marginpar{\\textcolor{red}{${spreadsheet_table}:".
                       "${spreadsheet_cell}}}";
                    $_=~s/\\spshcell{([0-9]+)}{([A-Z0-9]+)}/$debug_content/;
                } else {
                    $_=~s/\\spshcell{([0-9]+)}{([A-Z0-9]+)}/$cell_content/;
                }
            }

            # cells
            while (/\\spshcells{([0-9]+)}{([A-Z])([0-9]+):([A-Z])([0-9]+)}/) {
                my $spreadsheet_table=$1;
                my $spreadsheet_start_cell_x=$2;
                my $spreadsheet_start_cell_y=$3;
                my $spreadsheet_end_cell_x=$4;
                my $spreadsheet_end_cell_y=$5;
                print "* spshcells reference found: ".$2.$3.":".$4.$5."\n";
                
                my @cell_list=();

                # horizontal or vertical ?
                my $horizontal=0;
                my $vertical=0;

                if ($spreadsheet_start_cell_y==$spreadsheet_end_cell_y){
                    # horizontal: numbers 1,2,3,4,5, ... ==
                    print "    Horizontal, Table $spreadsheet_table\n";
                    my $spreadsheet_y=$spreadsheet_start_cell_y;
                    print "      Start x:   $spreadsheet_start_cell_x \n";
                    print "      End x:     $spreadsheet_end_cell_x \n";
                    my @x_list=($spreadsheet_start_cell_x .. $spreadsheet_end_cell_x);
                    foreach my $item (@x_list){
                        my $cell=$item.$spreadsheet_y;
                        print "         -> $cell \n";
                        push @cell_list, $cell;
                    }
                } elsif ($spreadsheet_start_cell_x eq $spreadsheet_end_cell_x){
                    # vertical: letters A,B,C,D, ... equal (eq)
                    print "   Vertical, Table $spreadsheet_table\n";
                    my $spreadsheet_x=$spreadsheet_start_cell_x;
                    print "      Start y:   $spreadsheet_start_cell_y \n";
                    print "      End y:     $spreadsheet_end_cell_y \n";
                    my @y_list=($spreadsheet_start_cell_y .. $spreadsheet_end_cell_y);
                    foreach my $item (@y_list){
                        my $cell=$spreadsheet_x.$item;
                        print "         -> $cell \n";
                        push @cell_list, $cell;
                    }
                } else {
                    # neither horizontal, nor vertical
                    print "ERROR: Could not determine horizontal or vertical speadsheet area\n";
                    exit;
                }


                my $replacement=$spsh_commands{$#cell_list+1};
                # I will create an \abcdefg...command
                # checking if groups match:
                &check_groups($#cell_list+1);

                my @cell_content_list=();
                my @cell_content_list_debug=();
                foreach my $cell (@cell_list){
                    my $cell_content = $spsh->[$spreadsheet_table]{$cell};
                    push @cell_content_list, $cell_content;
                    push @cell_content_list_debug, "\\textcolor{red}{".$cell_content."}";
                }

                my $command_options="";
                if ($file_info{'documentclass'}{'debug'}==1){
                    $command_options=join("}{", @cell_content_list_debug);
                } else {
                    $command_options=join("}{", @cell_content_list);
                }

                $replacement=$replacement.$command_options."}";
                $_=~s/\\spshcells{([0-9]+)}{([A-Z0-9]+):([A-Z0-9]+)}/$replacement/;
            }
            print TEXTEMP $_;
        }
        close(TEX);
    }
    if ( $i <= $file_info{'group-commands'} ){
         print TEXTEMP "\n\\newpage\n\n"; 
    }
}



print TEXTEMP '\end{document}';



# ???? decide how many tex files to create and concatenate them
# remember created files to delete them   

&compile_tex();

   
if ($noview==0){
    &viewer();
}


# Ende
print "##### jefflatex has compiled everything ---> done\n";





############################################################
# Subs
############################################################
sub  check_options{
   my ($parse_ergebnis) = @_;
   if (not $parse_ergebnis==1){
      my @list = split(/\//,$0);
      my $scriptname = pop @list;
      print "\nSie haben bei der Eingabe der ",
            "Optionen einen Fehler begangen.\n"; 
      print "Siehe Fehlermeldung weiter oben. \n\n";
      print "... $scriptname beendet sich.\n\n";
      exit;
   } else {
         print "Alle Befehls-Optionen wurden erkannt.\n\n";
   }

}


sub check_file {
   open (TEXFILE, $tex_file);
   while (<TEXFILE>){
     # Leerzeichen ersetzen
     s/ //g;
     # check vorspann
     if (/^\%+.*alloptions=yes/){
        print "   ### alloptions found! \n";
        $file_info{'alloptions'}=1;
     } elsif (/\\spshfile{([A-Za-z0-9_.-]+)}/) {
         $spreadsheet_file=$1;
         $file_info{'spshfiles'}{$1}="yes";
         $file_info{'spreadsheet'}=1;
     } elsif (/^\\documentclass/) {
        # reguläre TEX-Datei
        print "   ### Type: Complete TEX-File\n";
        $file_info{'type'}="texfile";
        # kein Vorspann notwendig
        # analyze options
        if ( m/^\\documentclass\[([0-9A-Za-z,]+)\]/ ){
           my @options=split(/,/,$1);
           foreach my $option (@options){
	       print "   Option:  $option \n";
               if ($option eq "debug"){
		  print "   ### debug found! \n";
                  $file_info{'documentclass'}{'debug'}=1;
               } 
               if ($option eq "a5landscape"){
		  print "   ### a5landscape found! \n";
                  $file_info{'documentclass'}{'a5landscape'}="yes";
                  $a5_landscape=1;
               } 
               if ($option eq "a5landscaperepeat"){
		  print "   ### a5landscaperepeat found! \n";
                  $file_info{'documentclass'}{'a5landscaperepeat'}="yes";
                  $a5_landscape_repeat=1;
               } 
           }
        }
     } elsif ( /^\\order{([0-9]+)}/ ){
           $file_info{'order'}=$1;
     } elsif (/^\\begin{aufgabe}/){
        # Aufgabendatei gefunden
        # Vorspann ansetzen
        if (not exists $file_info{'documentclass'}){
           print "   ### Type: Aufgabendatei\n";
           $file_info{'type'}="problemfile";
        }
     } 

     if (/^%/){
         print "Comment: $_";
         next;
     }

     # ??????? this is done once again
     if (/\\abcdefgh\{/) {
        # 8 variations
        $file_info{'group-commands'}=8;
     } elsif (/\\abcdefg\{/) {
        # 7 variations
        $file_info{'group-commands'}=7;
     } elsif (/\\abcdef\{/) {
        # 6 variations
        $file_info{'group-commands'}=6;
     } elsif (/\\abcde\{/) {
        # 5 variations
        $file_info{'group-commands'}=5;
     } elsif (/\\abcd\{/) {
        # 4 variations
        $file_info{'group-commands'}=4;
     } elsif (/\\abc\{/) {
        # 3 variations
        $file_info{'group-commands'}=3;
     } elsif (/\\ab\{/){
        # 2 variations
        $file_info{'group-commands'}=2;
     }
   }
   # exit if nothing usable (\documentclass, \begin{aufgabe}) found
   if ( not exists $file_info{'type'} ) {
        $file_info{'type'}="unknown";
        print "##### Type: Unknown, Please check your file.\n";
        exit;
    }
}


sub check_groups {
    my ($max_groups) = @_;
    print "Command $spsh_commands{$max_groups}} found  -> assuming $max_groups groups\n";
    if (not exists $file_info{'max_groups'}){
        $file_info{'max_groups'}=$max_groups;
    } else {
        if (not $max_groups==$file_info{'max_groups'}){
            print "Groups commands do not match:\n";
            print "   Groups: $file_info{'max_groups'} \n";
            print "   Groups: $max_groups \n";
            exit;
        }
    }
}


sub compile_tex {
   # Dateinamen
   my $work_base_file="$base"."-temp";
   my $tex_file = "$work_base_file".".tex";
   my $dvi_file = "$work_base_file".".dvi";
   my $ps_file = "$work_base_file".".ps";
   my $png_file = "$work_base_file".".png";
   my $log_file = "$work_base_file".".log";
   my $aux_file = "$work_base_file".".aux";
   # what to do
   if ($pdf==1) {
       # pdflatexen
       print "##### jefflatex is starting pdflatex on:\n",
             "  $tex_file ($file_info{'max_groups'} Groups)\n...\n";
       system("cd $source_dir; pdflatex $tex_file");
       print "##### ending pdflatex ...\n";
   } elsif ($presentation==1) {
       # latexen
       print "##### jefflatex is starting latex on:\n",
             "  $tex_file ($file_info{'max_groups'} Groups)\n...\n";
       system("cd $source_dir; latex $tex_file");
       system("cd $source_dir; latex $tex_file");
       print "##### ending latex ...\n";
       # pdf erzeugen
       print "##### jefflatex is  starting dvipdf on:\n",
             "  $dvi_file \n...\n";
       system("cd $source_dir; dvipdf $dvi_file");
       system("cd $source_dir; dvipdf $dvi_file");
       print "##### ending dvipdf ...\n";
   } elsif ($png==1) {
       # latexen
       print "##### jefflatex is starting latex on:\n",
             "  $tex_file ($file_info{'max_groups'} Groups)\n...\n";
       system("cd $source_dir; latex $tex_file");
#       system("cd $source_dir; latex $tex_file");
       print "##### ending latex ...\n";
       # Postscript erzeugen
       print "##### jefflatex is starting dvips on:\n",
             "  $dvi_file \n...\n";
       print "$dvi_file in $source_dir\n";
#       system("cd $source_dir; dvips -x2074 -y2074 -T 50cm,120cm $dvi_file");
       system("cd $source_dir; dvips -x$width -y$width -T 50cm,120cm -E $dvi_file $dvips_string");
       print "##### ending dvips ...\n";
       # png erzeugen
       print "##### jefflatex is converting: \n  $ps_file\n to:\n  $png_file\n \n...\n";
       system("cd $source_dir; convert -crop 0x0   $ps_file png:$png_file");
       print "##### ending convert ...\n";

   } else {
       #latexen und dvips
       print "##### jefflatex is starting Latex on:\n  $tex_file \n...\n";
       system("cd $source_dir; latex $tex_file");
       system("cd $source_dir; latex $tex_file");
       print "##### ending Latex ...\n";
       # Postscript erzeugen
       print "##### jefflatex is starting dvips on:\n  $dvi_file \n...\n";
       system("cd $source_dir; dvips $dvi_file $dvips_string");
       print "##### ending dvips ...\n";
      
      if ($a5_landscape==1){   
         my $command="cd $source_dir; ".
                     "a5-landscape-on-a4 $ps_file ${ps_file}-temp empty; ".
                     "mv ${ps_file}-temp $ps_file";
         print "Modifying result with $command ...\n";
         system($command);
      }
      if ($a5_landscape_repeat==1){
	  my $command="cd $source_dir; ".
                      "a5-landscape-on-a4 $ps_file ${ps_file}-temp repeat; ".
                      "mv ${ps_file}-temp $ps_file";
         print "Modifying result ...\n";
         system($command);
      }
   }

   # Aufräumen
   &clean($tex_file);
   &clean($dvi_file);
   &clean($log_file);
   &clean($aux_file);
   if ($png==1){
       &clean($ps_file);
   }
}



sub modify_ps_old {
  my $ps_file = "$base".".ps";
  if ($a5_landscape==1){   
      my $command="a5-landscape-on-a4 $ps_file $ps_file empty";
      print "Modifying result with $command ...\n";
      #system($command);
  }
  if ($a5_landscape_repeat==1){
      my $command="a5-landscape-on-a4 $ps_file $ps_file repeat";
      print "Modifying result ...\n";
      #system($command);
  }
}


sub viewer {
   my $found=0;
   # Dateinamen
   my $work_base_file="$base"."-temp";
   my $ps_file  = "$work_base_file".".ps";
   my $pdf_file = "$work_base_file".".pdf";
   my $png_file = "$work_base_file".".png";

   if ($pdf==1 or $presentation==1) {
       # pdf-viewer
       print "##### jefflatex is starting a PDF-viewer on $pdf_file ...\n";
       foreach my $viewer (@pdf_viewer) {
	  if ($found==1){next;};
          if (-e "$viewer") {
              if ($viewer=~/\/xpdf/ and $presentation==1){
                 system("$viewer -fullscreen $pdf_file");
              } else {
                 system("$viewer $pdf_file");
	      }
              $found=1;
          }
       }
       print "##### ending PDF-viewer ...\n";
   } elsif ($png==1) {
       # png-viewer
       if (-e $png_file){
          &png_viewer($png_file);
      } else {
          # Hide misleading error: viewer not found   
          $found=1;
          print "$png_file does not exist! \n";
          for (my $i = 0; $i <= 9; $i++) {  # count from 0 to 5
              my $file_base = basename($png_file,".png");
              my $dir_base = dirname($png_file);
              my $file= $dir_base."/".$file_base."-".$i.".png";
              print "   Looking for $file \n";       
              if (-e $file){
                 &png_viewer($file);
	      }
          }
      }
   } else {
       #ps-viewer
       print "##### jefflatex is starting a PS-viewer on $ps_file ...\n";
       foreach my $viewer (@ps_viewer) {
	  if ($found==1){next;};
          if (-e "$viewer") {
             system("$viewer $ps_file");
             $found=1;
          }
       }
       print "##### ending PS-viewer ...\n";
   }

   # Fehler, wenn kein Viewer gefunden wurde
   if ($found==0){
       print "Konnte keinen Viewer finden!\n";
       print "Bitte prüfen Sie:\n";
       print "   $sys_config  \n";
       print "   $user_config  \n";
   }

   # Temporäre Dateien löschen
   &clean($ps_file);
   &clean($pdf_file);
   &clean($png_file);
}



sub png_viewer{
    my ($file) = @_;
    print "##### jefflatex is starting a PNG-viewer on $file ...\n";
    foreach my $viewer (@png_viewer) {
      if ($found==1){next;};
        if (-e "$viewer") {
	  print "Viewer= $viewer\n";
            system("$viewer $file");
            $found=1;
        }
      }
    $found=0;
    print "##### ending PNG-viewer on $file ...\n";
}



sub clean {
    my ($delete_file) = @_;
    if (-e $delete_file) {
        print "##### cleaning up $delete_file \n";
	system("rm $delete_file");
    }
}



