#!/usr/bin/perl -w
# Dieses Script (problectix-marklist) wurde von Rüdiger Beck erstellt
# Es ist freie Software
# Bei Fehlern wenden Sie sich bitte an mich.
# jeffbeck@web.de  oder  jeffbeck@gmx.de


# ===========================================================================
# Bibliotheken
# ===========================================================================
use strict;
use Getopt::Long;
Getopt::Long::Configure ("bundling");
#use Schedule::at;
# Einlesen der Konfigurationsdatei für Entwickler
#{ package DevelConf ; do "/etc/sophomorix/devel/user/sophomorix-devel.conf"}

# jeffbecks Bibliothek und
# Einlesen der Konfigurationsdatei
#require "${DevelConf::library_pfad}/sophomorix-lib";

# Todo:
# Seitenrand geringer
# ab 30 oder so Zeilen mehrspaltig
# 2 Listen auf eine Seite nebeneinander ermöglichen
# konvertierung nach ps -- anzeige mit kghostview, ...
# option --view öffnet acroread oder so

my $home="$ENV{'HOME'}";
my $user="$ENV{'USER'}";
#my $path=$home;
my $path="/tmp";
my $file="$user-out";
my $tex_file="$path"."/$file.tex";
my $pdf_file="$path"."/$file.pdf";
#my $tex_file="out.tex";
#my $pdf_file="out.pdf";


# ===========================================================================
# Optionen verarbeiten
# ==========================================================================

# Variablen für Optionen
my $max=0;
my $min=0;
my $step=0;
my $mistake=0;
my $pdf=0;

# Liste der zulässigen Schrittweiten
my %hash = qw( 0.5 "" 
                 1 ""
               1.0 ""
               1.5 ""
                 2 ""
               2.0 ""
               2.5 ""
                 3 ""
               3.0 "");


# Parsen der Optionen
my $testopt=GetOptions(
           "max=i" => \$max,
           "min=i" => \$min,
           "step|schritt=f" => \$step,
           "mistake|fehler" => \$mistake,
           "pdf" => \$pdf,
   );


# Prüfen, ob Optionen erkannt wurden
#&check_options($testopt);

print "--max number  : Maximalpunktzahl (Note 1,0):  $max\n";
print "--min number  : Minmalpunktzahl  (Note 6,0):  $min\n";
print "--step number : Schrittweite:            $step\n";


# Abbruch bei falscher Eingabe
if ($max==0) {
    print "Maximale Punktzahl darf nicht 0 sein\n";
    exit;
}


if(not exists $hash{$step}) {
    print "$step ist eine nicht zulässige Schrittweite\n";
} 


my $mark_step = (5.0*$step)/($max-$min); 
# Liste mit den in der Tabelle enthaltenen Punktzahlen erzeugen >
my @list=();
my $x=$max;

open(OUT,">$tex_file");

while ($x >= $min) {
    push @list, $x;
   $x=$x-$step;
}

print OUT "%% This Latex-Code was generated by problectix-marklist \n";
print OUT "\\documentclass{article} \n\n";
print OUT "\\begin{document} \n\n";
print OUT "\\pagestyle{empty} \n\n";
print OUT "\\Large \n\n";
print OUT "\\begin{center}\n\n";
print OUT "\\textbf{\\huge Notenliste}\n\n";
print OUT "\\vspace{10mm}\n\n";

my $note=1;

if ($mistake==1) {
   # Fehler -- Note
   print OUT "\\begin{tabular}{|c|c|} \\hline \n";
   print OUT "\\textbf{Fehler} & \\textbf{Note} \\\\ \\hline\\hline \n";
   foreach my $point (@list) {
      my $mistakes = $max-$point;
      # Note nach 1. Kommastelle abschneiden
      my $dezi_note=int($note*10)/10;
      if ($point==$min) {
          # bei minimalpunktzahl glatte 6
	  $dezi_note=6;
      }
      print OUT "$mistakes & $dezi_note \\\\ \\hline \n";
      $note=$note+$mark_step;
   }
} else {
   # Punkte -- Note
   print OUT "\\begin{tabular}{|c|c|} \\hline \n";
   print OUT "\\textbf{Punkte} & \\textbf{Note} \\\\ \\hline\\hline \n";
   foreach my $point (@list) {
      # Note nach 1. Kommastelle abschneiden
      my $dezi_note=int($note*10)/10;
      if ($point==$min) {
          # bei minimalpunktzahl glatte 6
	  $dezi_note=6;
      }
      print OUT "$point & $dezi_note \\\\ \\hline \n";
      $note=$note+$mark_step;
   }
}

print OUT "\\end{tabular} \n\n";
print OUT "\\end{center} \n\n";
print OUT "\\end{document}\n";
print OUT "\n";

close(OUT);

# Compile the file
system ("cd $path; pdflatex $file.tex");

print "\nFile $path/$file.pdf was created.\n\n";
